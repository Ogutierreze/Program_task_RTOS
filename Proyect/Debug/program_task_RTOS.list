
program_task_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005744  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080058d4  080058d4  000068d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800594c  0800594c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  0800594c  0800594c  0000694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005954  08005954  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005954  08005954  00006954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005958  08005958  00006958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800595c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010fc  20000010  0800596c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000110c  0800596c  0000710c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013353  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b54  00000000  00000000  0001a393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001cee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d6c  00000000  00000000  0001e058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028594  00000000  00000000  0001edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013558  00000000  00000000  00047358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102cd4  00000000  00000000  0005a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004890  00000000  00000000  0015d5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00161e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058bc 	.word	0x080058bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080058bc 	.word	0x080058bc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	20000080 	.word	0x20000080

080004f4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
	  UNUSED(GPIO_Pin);


	  if(GPIO_Pin == GPIO_PIN_1){
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d102      	bne.n	800050a <HAL_GPIO_EXTI_Callback+0x16>
		flag_D1 = 1;
 8000504:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <HAL_GPIO_EXTI_Callback+0x24>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
	  }


}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200003f8 	.word	0x200003f8

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b5b0      	push	{r4, r5, r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fb9a 	bl	8000c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f82f 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f949 	bl	80007c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800052e:	f000 f871 	bl	8000614 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000532:	f000 f8e5 	bl	8000700 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f913 	bl	8000760 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <main+0x60>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f003 ff25 	bl	80043a0 <osThreadCreate>
 8000556:	4603      	mov	r3, r0
 8000558:	4a09      	ldr	r2, [pc, #36]	@ (8000580 <main+0x64>)
 800055a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800055c:	f003 ff19 	bl	8004392 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flag_D1!=0){
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <main+0x68>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0fb      	beq.n	8000560 <main+0x44>
		  HAL_GPIO_TogglePin(D1_GPIO_Port,D1_Pin);
 8000568:	2120      	movs	r1, #32
 800056a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800056e:	f001 fe85 	bl	800227c <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000572:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000576:	f000 fbe5 	bl	8000d44 <HAL_Delay>
	  if(flag_D1!=0){
 800057a:	e7f1      	b.n	8000560 <main+0x44>
 800057c:	080058e0 	.word	0x080058e0
 8000580:	200003f4 	.word	0x200003f4
 8000584:	200003f8 	.word	0x200003f8

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	@ 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	@ 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 f964 	bl	8005864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ae:	f001 fea5 	bl	80022fc <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 f99c 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005bc:	2310      	movs	r3, #16
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c8:	2360      	movs	r3, #96	@ 0x60
 80005ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fee7 	bl	80023a8 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005e0:	f000 f988 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 faaf 	bl	8002b60 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000608:	f000 f974 	bl	80008f4 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3758      	adds	r7, #88	@ 0x58
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
 8000634:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000636:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000638:	4a2f      	ldr	r2, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0xe4>)
 800063a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800063c:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000642:	4b2c      	ldr	r3, [pc, #176]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000648:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064e:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000654:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000656:	2204      	movs	r2, #4
 8000658:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800065a:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 800065c:	2200      	movs	r2, #0
 800065e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000660:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000662:	2200      	movs	r2, #0
 8000664:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000666:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000668:	2201      	movs	r2, #1
 800066a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066c:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067a:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 800068a:	2200      	movs	r2, #0
 800068c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 8000698:	f000 fd04 	bl	80010a4 <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006a2:	f000 f927 	bl	80008f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 80006b2:	f001 fa5f 	bl	8001b74 <HAL_ADCEx_MultiModeConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006bc:	f000 f91a 	bl	80008f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_ADC1_Init+0xe8>)
 80006c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2306      	movs	r3, #6
 80006c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006cc:	237f      	movs	r3, #127	@ 0x7f
 80006ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d0:	2304      	movs	r3, #4
 80006d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_ADC1_Init+0xe0>)
 80006de:	f000 fe31 	bl	8001344 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006e8:	f000 f904 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	@ 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000280 	.word	0x20000280
 80006f8:	50040000 	.word	0x50040000
 80006fc:	36902000 	.word	0x36902000

08000700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	@ (800075c <MX_USART1_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000744:	f003 f8ec 	bl	8003920 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f8d1 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200002e4 	.word	0x200002e4
 800075c:	40013800 	.word	0x40013800

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000766:	4a15      	ldr	r2, [pc, #84]	@ (80007bc <MX_USART2_UART_Init+0x5c>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 80007a4:	f003 f8bc 	bl	8003920 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f8a1 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000036c 	.word	0x2000036c
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b41      	ldr	r3, [pc, #260]	@ (80008dc <MX_GPIO_Init+0x11c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a40      	ldr	r2, [pc, #256]	@ (80008dc <MX_GPIO_Init+0x11c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b3e      	ldr	r3, [pc, #248]	@ (80008dc <MX_GPIO_Init+0x11c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <MX_GPIO_Init+0x11c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a3a      	ldr	r2, [pc, #232]	@ (80008dc <MX_GPIO_Init+0x11c>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b38      	ldr	r3, [pc, #224]	@ (80008dc <MX_GPIO_Init+0x11c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b35      	ldr	r3, [pc, #212]	@ (80008dc <MX_GPIO_Init+0x11c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a34      	ldr	r2, [pc, #208]	@ (80008dc <MX_GPIO_Init+0x11c>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b32      	ldr	r3, [pc, #200]	@ (80008dc <MX_GPIO_Init+0x11c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D1_Pin|D3_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	21a0      	movs	r1, #160	@ 0xa0
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f001 fd11 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	482c      	ldr	r0, [pc, #176]	@ (80008e0 <MX_GPIO_Init+0x120>)
 8000830:	f001 fd0c 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8000834:	2312      	movs	r3, #18
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000838:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084c:	f001 fb54 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D3_Pin;
 8000850:	23a0      	movs	r3, #160	@ 0xa0
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086a:	f001 fb45 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 800086e:	2301      	movs	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000872:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4817      	ldr	r0, [pc, #92]	@ (80008e0 <MX_GPIO_Init+0x120>)
 8000884:	f001 fb38 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	4810      	ldr	r0, [pc, #64]	@ (80008e0 <MX_GPIO_Init+0x120>)
 80008a0:	f001 fb2a 	bl	8001ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2105      	movs	r1, #5
 80008a8:	2006      	movs	r0, #6
 80008aa:	f001 faee 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ae:	2006      	movs	r0, #6
 80008b0:	f001 fb07 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2105      	movs	r1, #5
 80008b8:	2007      	movs	r0, #7
 80008ba:	f001 fae6 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008be:	2007      	movs	r0, #7
 80008c0:	f001 faff 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2105      	movs	r1, #5
 80008c8:	200a      	movs	r0, #10
 80008ca:	f001 fade 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f001 faf7 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000400 	.word	0x48000400

080008e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f003 fda3 	bl	8004438 <osDelay>
 80008f2:	e7fb      	b.n	80008ec <StartDefaultTask+0x8>

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <HAL_MspInit+0x4c>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	4a10      	ldr	r2, [pc, #64]	@ (800094c <HAL_MspInit+0x4c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6613      	str	r3, [r2, #96]	@ 0x60
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_MspInit+0x4c>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_MspInit+0x4c>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6593      	str	r3, [r2, #88]	@ 0x58
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_MspInit+0x4c>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f001 faa4 	bl	8001e8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0ac      	sub	sp, #176	@ 0xb0
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2288      	movs	r2, #136	@ 0x88
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f004 ff77 	bl	8005864 <memset>
  if(hadc->Instance==ADC1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a27      	ldr	r2, [pc, #156]	@ (8000a18 <HAL_ADC_MspInit+0xc8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d146      	bne.n	8000a0e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000980:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000984:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000986:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800098a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000996:	2308      	movs	r3, #8
 8000998:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800099a:	2307      	movs	r3, #7
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 faf9 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009bc:	f7ff ff9a 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <HAL_ADC_MspInit+0xcc>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <HAL_ADC_MspInit+0xcc>)
 80009c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <HAL_ADC_MspInit+0xcc>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d8:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <HAL_ADC_MspInit+0xcc>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009dc:	4a0f      	ldr	r2, [pc, #60]	@ (8000a1c <HAL_ADC_MspInit+0xcc>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <HAL_ADC_MspInit+0xcc>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC_Pin1_Pin;
 80009f0:	2310      	movs	r3, #16
 80009f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009f6:	230b      	movs	r3, #11
 80009f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(ADC_Pin1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <HAL_ADC_MspInit+0xd0>)
 8000a0a:	f001 fa75 	bl	8001ef8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a0e:	bf00      	nop
 8000a10:	37b0      	adds	r7, #176	@ 0xb0
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	50040000 	.word	0x50040000
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000800 	.word	0x48000800

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0ae      	sub	sp, #184	@ 0xb8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	2288      	movs	r2, #136	@ 0x88
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 ff0d 	bl	8005864 <memset>
  if(huart->Instance==USART1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a43      	ldr	r2, [pc, #268]	@ (8000b5c <HAL_UART_MspInit+0x138>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d13d      	bne.n	8000ad0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 faa1 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a6c:	f7ff ff42 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a70:	4b3b      	ldr	r3, [pc, #236]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a74:	4a3a      	ldr	r2, [pc, #232]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a7c:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b35      	ldr	r3, [pc, #212]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	4a34      	ldr	r2, [pc, #208]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a94:	4b32      	ldr	r3, [pc, #200]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aba:	2307      	movs	r3, #7
 8000abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aca:	f001 fa15 	bl	8001ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ace:	e040      	b.n	8000b52 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a23      	ldr	r2, [pc, #140]	@ (8000b64 <HAL_UART_MspInit+0x140>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d13b      	bne.n	8000b52 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fa5e 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000af2:	f7ff feff 	bl	80008f4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afa:	4a19      	ldr	r2, [pc, #100]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_UART_MspInit+0x13c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b26:	230c      	movs	r3, #12
 8000b28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4e:	f001 f9d3 	bl	8001ef8 <HAL_GPIO_Init>
}
 8000b52:	bf00      	nop
 8000b54:	37b8      	adds	r7, #184	@ 0xb8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40004400 	.word	0x40004400

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 f8af 	bl	8000d04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ba6:	f004 f9d7 	bl	8004f58 <xTaskGetSchedulerState>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d001      	beq.n	8000bb4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bb0:	f004 fc1a 	bl	80053e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f001 fb77 	bl	80022b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f001 fb70 	bl	80022b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8000bd8:	2010      	movs	r0, #16
 8000bda:	f001 fb69 	bl	80022b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f004 fe1d 	bl	8005874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3a:	f7ff fc6f 	bl	800051c <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c4c:	0800595c 	.word	0x0800595c
  ldr r2, =_sbss
 8000c50:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c54:	2000110c 	.word	0x2000110c

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>

08000c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f001 f905 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f80e 	bl	8000c8c <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e001      	b.n	8000c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7c:	f7ff fe40 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d023      	beq.n	8000ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_InitTick+0x70>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 f911 	bl	8001ede <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10f      	bne.n	8000ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d809      	bhi.n	8000cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f001 f8db 	bl	8001e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_InitTick+0x74>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e007      	b.n	8000cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e001      	b.n	8000cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	200003fc 	.word	0x200003fc

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200003fc 	.word	0x200003fc

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008

08000d8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	431a      	orrs	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	609a      	str	r2, [r3, #8]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3360      	adds	r3, #96	@ 0x60
 8000e06:	461a      	mov	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <LL_ADC_SetOffset+0x44>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	4313      	orrs	r3, r2
 8000e24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e2c:	bf00      	nop
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	03fff000 	.word	0x03fff000

08000e3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3360      	adds	r3, #96	@ 0x60
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3360      	adds	r3, #96	@ 0x60
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e92:	bf00      	nop
 8000e94:	371c      	adds	r7, #28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b087      	sub	sp, #28
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3330      	adds	r3, #48	@ 0x30
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	4413      	add	r3, r2
 8000ebc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	f003 031f 	and.w	r3, r3, #31
 8000ec8:	211f      	movs	r1, #31
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	0e9b      	lsrs	r3, r3, #26
 8000ed6:	f003 011f 	and.w	r1, r3, #31
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000eea:	bf00      	nop
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b087      	sub	sp, #28
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3314      	adds	r3, #20
 8000f06:	461a      	mov	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	0e5b      	lsrs	r3, r3, #25
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	4413      	add	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	0d1b      	lsrs	r3, r3, #20
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2107      	movs	r1, #7
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	0d1b      	lsrs	r3, r3, #20
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f40:	bf00      	nop
 8000f42:	371c      	adds	r7, #28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f64:	43db      	mvns	r3, r3
 8000f66:	401a      	ands	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0318 	and.w	r3, r3, #24
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f70:	40d9      	lsrs	r1, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	400b      	ands	r3, r1
 8000f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	0007ffff 	.word	0x0007ffff

08000f94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000fa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	6093      	str	r3, [r2, #8]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fcc:	d101      	bne.n	8000fd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ff4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800101c:	d101      	bne.n	8001022 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <LL_ADC_IsEnabled+0x18>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <LL_ADC_IsEnabled+0x1a>
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	2b04      	cmp	r3, #4
 8001068:	d101      	bne.n	800106e <LL_ADC_REG_IsConversionOngoing+0x18>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	2b08      	cmp	r3, #8
 800108e:	d101      	bne.n	8001094 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e130      	b.n	8001320 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d109      	bne.n	80010e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fc3f 	bl	8000950 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff67 	bl	8000fb8 <LL_ADC_IsDeepPowerDownEnabled>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff4d 	bl	8000f94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff82 	bl	8001008 <LL_ADC_IsInternalRegulatorEnabled>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d115      	bne.n	8001136 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff66 	bl	8000fe0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001114:	4b84      	ldr	r3, [pc, #528]	@ (8001328 <HAL_ADC_Init+0x284>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	099b      	lsrs	r3, r3, #6
 800111a:	4a84      	ldr	r2, [pc, #528]	@ (800132c <HAL_ADC_Init+0x288>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	3301      	adds	r3, #1
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001128:	e002      	b.n	8001130 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3b01      	subs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f9      	bne.n	800112a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff64 	bl	8001008 <LL_ADC_IsInternalRegulatorEnabled>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10d      	bne.n	8001162 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800114a:	f043 0210 	orr.w	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff75 	bl	8001056 <LL_ADC_REG_IsConversionOngoing>
 800116c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 80c9 	bne.w	800130e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f040 80c5 	bne.w	800130e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001188:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800118c:	f043 0202 	orr.w	r2, r3, #2
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff49 	bl	8001030 <LL_ADC_IsEnabled>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d115      	bne.n	80011d0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011a4:	4862      	ldr	r0, [pc, #392]	@ (8001330 <HAL_ADC_Init+0x28c>)
 80011a6:	f7ff ff43 	bl	8001030 <LL_ADC_IsEnabled>
 80011aa:	4604      	mov	r4, r0
 80011ac:	4861      	ldr	r0, [pc, #388]	@ (8001334 <HAL_ADC_Init+0x290>)
 80011ae:	f7ff ff3f 	bl	8001030 <LL_ADC_IsEnabled>
 80011b2:	4603      	mov	r3, r0
 80011b4:	431c      	orrs	r4, r3
 80011b6:	4860      	ldr	r0, [pc, #384]	@ (8001338 <HAL_ADC_Init+0x294>)
 80011b8:	f7ff ff3a 	bl	8001030 <LL_ADC_IsEnabled>
 80011bc:	4603      	mov	r3, r0
 80011be:	4323      	orrs	r3, r4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	485c      	ldr	r0, [pc, #368]	@ (800133c <HAL_ADC_Init+0x298>)
 80011cc:	f7ff fdde 	bl	8000d8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7e5b      	ldrb	r3, [r3, #25]
 80011d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d106      	bne.n	800120c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	3b01      	subs	r3, #1
 8001204:	045b      	lsls	r3, r3, #17
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001220:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <HAL_ADC_Init+0x29c>)
 8001230:	4013      	ands	r3, r2
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	430b      	orrs	r3, r1
 800123a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff1b 	bl	800107c <LL_ADC_INJ_IsConversionOngoing>
 8001246:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d13d      	bne.n	80012ca <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d13a      	bne.n	80012ca <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001258:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001260:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001270:	f023 0302 	bic.w	r3, r3, #2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	69b9      	ldr	r1, [r7, #24]
 800127a:	430b      	orrs	r3, r1
 800127c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001284:	2b01      	cmp	r3, #1
 8001286:	d118      	bne.n	80012ba <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001292:	f023 0304 	bic.w	r3, r3, #4
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800129e:	4311      	orrs	r1, r2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80012a4:	4311      	orrs	r1, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80012aa:	430a      	orrs	r2, r1
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	e007      	b.n	80012ca <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d10c      	bne.n	80012ec <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	f023 010f 	bic.w	r1, r3, #15
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80012ea:	e007      	b.n	80012fc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 020f 	bic.w	r2, r2, #15
 80012fa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001300:	f023 0303 	bic.w	r3, r3, #3
 8001304:	f043 0201 	orr.w	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	@ 0x54
 800130c:	e007      	b.n	800131e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001312:	f043 0210 	orr.w	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800131e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3724      	adds	r7, #36	@ 0x24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	053e2d63 	.word	0x053e2d63
 8001330:	50040000 	.word	0x50040000
 8001334:	50040100 	.word	0x50040100
 8001338:	50040200 	.word	0x50040200
 800133c:	50040300 	.word	0x50040300
 8001340:	fff0c007 	.word	0xfff0c007

08001344 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0b6      	sub	sp, #216	@ 0xd8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x22>
 8001362:	2302      	movs	r3, #2
 8001364:	e3c9      	b.n	8001afa <HAL_ADC_ConfigChannel+0x7b6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fe6f 	bl	8001056 <LL_ADC_REG_IsConversionOngoing>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 83aa 	bne.w	8001ad4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b05      	cmp	r3, #5
 800138e:	d824      	bhi.n	80013da <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	3b02      	subs	r3, #2
 8001396:	2b03      	cmp	r3, #3
 8001398:	d81b      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0x8e>
 800139a:	a201      	add	r2, pc, #4	@ (adr r2, 80013a0 <HAL_ADC_ConfigChannel+0x5c>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	080013b1 	.word	0x080013b1
 80013a4:	080013b9 	.word	0x080013b9
 80013a8:	080013c1 	.word	0x080013c1
 80013ac:	080013c9 	.word	0x080013c9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80013b0:	230c      	movs	r3, #12
 80013b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013b6:	e010      	b.n	80013da <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80013b8:	2312      	movs	r3, #18
 80013ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013be:	e00c      	b.n	80013da <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80013c0:	2318      	movs	r3, #24
 80013c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013c6:	e008      	b.n	80013da <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80013c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013d0:	e003      	b.n	80013da <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013d8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80013e8:	f7ff fd59 	bl	8000e9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe30 	bl	8001056 <LL_ADC_REG_IsConversionOngoing>
 80013f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fe3c 	bl	800107c <LL_ADC_INJ_IsConversionOngoing>
 8001404:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 81a4 	bne.w	800175a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 819f 	bne.w	800175a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	461a      	mov	r2, r3
 800142a:	f7ff fd64 	bl	8000ef6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d00a      	beq.n	8001466 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6919      	ldr	r1, [r3, #16]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001460:	f7ff fcc8 	bl	8000df4 <LL_ADC_SetOffset>
 8001464:	e179      	b.n	800175a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fce5 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10a      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x14e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fcda 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	0e9b      	lsrs	r3, r3, #26
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	e01e      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x18c>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fccf 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80014c0:	2320      	movs	r3, #32
 80014c2:	e004      	b.n	80014ce <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80014c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d105      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1a4>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0e9b      	lsrs	r3, r3, #26
 80014e2:	f003 031f 	and.w	r3, r3, #31
 80014e6:	e018      	b.n	800151a <HAL_ADC_ConfigChannel+0x1d6>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014f4:	fa93 f3a3 	rbit	r3, r3
 80014f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80014fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001504:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800150c:	2320      	movs	r3, #32
 800150e:	e004      	b.n	800151a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001510:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001514:	fab3 f383 	clz	r3, r3
 8001518:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800151a:	429a      	cmp	r2, r3
 800151c:	d106      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fc9e 	bl	8000e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fc82 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10a      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x214>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2101      	movs	r1, #1
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fc77 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	0e9b      	lsrs	r3, r3, #26
 8001552:	f003 021f 	and.w	r2, r3, #31
 8001556:	e01e      	b.n	8001596 <HAL_ADC_ConfigChannel+0x252>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc6c 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001576:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800157a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800157e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001586:	2320      	movs	r3, #32
 8001588:	e004      	b.n	8001594 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800158a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x26a>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0e9b      	lsrs	r3, r3, #26
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	e018      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x29c>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80015c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80015ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80015d2:	2320      	movs	r3, #32
 80015d4:	e004      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80015d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d106      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	2101      	movs	r1, #1
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fc3b 	bl	8000e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2102      	movs	r1, #2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fc1f 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10a      	bne.n	800161e <HAL_ADC_ConfigChannel+0x2da>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fc14 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	0e9b      	lsrs	r3, r3, #26
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	e01e      	b.n	800165c <HAL_ADC_ConfigChannel+0x318>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2102      	movs	r1, #2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fc09 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800163c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001640:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800164c:	2320      	movs	r3, #32
 800164e:	e004      	b.n	800165a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x330>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0e9b      	lsrs	r3, r3, #26
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	e014      	b.n	800169e <HAL_ADC_ConfigChannel+0x35a>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001682:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001688:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001690:	2320      	movs	r3, #32
 8001692:	e004      	b.n	800169e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001694:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800169e:	429a      	cmp	r2, r3
 80016a0:	d106      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	2102      	movs	r1, #2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fbdc 	bl	8000e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2103      	movs	r1, #3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fbc0 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10a      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x398>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2103      	movs	r1, #3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fbb5 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	0e9b      	lsrs	r3, r3, #26
 80016d6:	f003 021f 	and.w	r2, r3, #31
 80016da:	e017      	b.n	800170c <HAL_ADC_ConfigChannel+0x3c8>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2103      	movs	r1, #3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fbaa 	bl	8000e3c <LL_ADC_GetOffsetChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80016f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016f6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80016f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80016fe:	2320      	movs	r3, #32
 8001700:	e003      	b.n	800170a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x3e0>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0e9b      	lsrs	r3, r3, #26
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	e011      	b.n	8001748 <HAL_ADC_ConfigChannel+0x404>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001734:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800173c:	2320      	movs	r3, #32
 800173e:	e003      	b.n	8001748 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001748:	429a      	cmp	r2, r3
 800174a:	d106      	bne.n	800175a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	2103      	movs	r1, #3
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fb87 	bl	8000e68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fc66 	bl	8001030 <LL_ADC_IsEnabled>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 8140 	bne.w	80019ec <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6819      	ldr	r1, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	461a      	mov	r2, r3
 800177a:	f7ff fbe7 	bl	8000f4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	4a8f      	ldr	r2, [pc, #572]	@ (80019c0 <HAL_ADC_ConfigChannel+0x67c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	f040 8131 	bne.w	80019ec <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10b      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x46e>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	3301      	adds	r3, #1
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	2b09      	cmp	r3, #9
 80017a8:	bf94      	ite	ls
 80017aa:	2301      	movls	r3, #1
 80017ac:	2300      	movhi	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	e019      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x4a2>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80017c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80017c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80017ca:	2320      	movs	r3, #32
 80017cc:	e003      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80017ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3301      	adds	r3, #1
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	2b09      	cmp	r3, #9
 80017de:	bf94      	ite	ls
 80017e0:	2301      	movls	r3, #1
 80017e2:	2300      	movhi	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d079      	beq.n	80018de <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x4c2>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0e9b      	lsrs	r3, r3, #26
 80017fc:	3301      	adds	r3, #1
 80017fe:	069b      	lsls	r3, r3, #26
 8001800:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001804:	e015      	b.n	8001832 <HAL_ADC_ConfigChannel+0x4ee>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001816:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800181e:	2320      	movs	r3, #32
 8001820:	e003      	b.n	800182a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	3301      	adds	r3, #1
 800182c:	069b      	lsls	r3, r3, #26
 800182e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x50e>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0e9b      	lsrs	r3, r3, #26
 8001844:	3301      	adds	r3, #1
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	e017      	b.n	8001882 <HAL_ADC_ConfigChannel+0x53e>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001862:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800186a:	2320      	movs	r3, #32
 800186c:	e003      	b.n	8001876 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800186e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	ea42 0103 	orr.w	r1, r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10a      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x564>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0e9b      	lsrs	r3, r3, #26
 8001898:	3301      	adds	r3, #1
 800189a:	f003 021f 	and.w	r2, r3, #31
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	051b      	lsls	r3, r3, #20
 80018a6:	e018      	b.n	80018da <HAL_ADC_ConfigChannel+0x596>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80018b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80018ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80018c0:	2320      	movs	r3, #32
 80018c2:	e003      	b.n	80018cc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80018c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	f003 021f 	and.w	r2, r3, #31
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018da:	430b      	orrs	r3, r1
 80018dc:	e081      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x5b6>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0e9b      	lsrs	r3, r3, #26
 80018f0:	3301      	adds	r3, #1
 80018f2:	069b      	lsls	r3, r3, #26
 80018f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018f8:	e015      	b.n	8001926 <HAL_ADC_ConfigChannel+0x5e2>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800190c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001912:	2320      	movs	r3, #32
 8001914:	e003      	b.n	800191e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3301      	adds	r3, #1
 8001920:	069b      	lsls	r3, r3, #26
 8001922:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x602>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0e9b      	lsrs	r3, r3, #26
 8001938:	3301      	adds	r3, #1
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	e017      	b.n	8001976 <HAL_ADC_ConfigChannel+0x632>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	61bb      	str	r3, [r7, #24]
  return result;
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800195e:	2320      	movs	r3, #32
 8001960:	e003      	b.n	800196a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3301      	adds	r3, #1
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	ea42 0103 	orr.w	r1, r2, r3
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x65e>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0e9b      	lsrs	r3, r3, #26
 800198c:	3301      	adds	r3, #1
 800198e:	f003 021f 	and.w	r2, r3, #31
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	3b1e      	subs	r3, #30
 800199a:	051b      	lsls	r3, r3, #20
 800199c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019a0:	e01e      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x69c>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	60fb      	str	r3, [r7, #12]
  return result;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d104      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80019ba:	2320      	movs	r3, #32
 80019bc:	e006      	b.n	80019cc <HAL_ADC_ConfigChannel+0x688>
 80019be:	bf00      	nop
 80019c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	f003 021f 	and.w	r2, r3, #31
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	3b1e      	subs	r3, #30
 80019da:	051b      	lsls	r3, r3, #20
 80019dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff fa85 	bl	8000ef6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <HAL_ADC_ConfigChannel+0x7c0>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d07a      	beq.n	8001aee <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019f8:	4843      	ldr	r0, [pc, #268]	@ (8001b08 <HAL_ADC_ConfigChannel+0x7c4>)
 80019fa:	f7ff f9ed 	bl	8000dd8 <LL_ADC_GetCommonPathInternalCh>
 80019fe:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a41      	ldr	r2, [pc, #260]	@ (8001b0c <HAL_ADC_ConfigChannel+0x7c8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d12c      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d126      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b10 <HAL_ADC_ConfigChannel+0x7cc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d004      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x6e8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a3b      	ldr	r2, [pc, #236]	@ (8001b14 <HAL_ADC_ConfigChannel+0x7d0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d15d      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a34:	4619      	mov	r1, r3
 8001a36:	4834      	ldr	r0, [pc, #208]	@ (8001b08 <HAL_ADC_ConfigChannel+0x7c4>)
 8001a38:	f7ff f9bb 	bl	8000db2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a3c:	4b36      	ldr	r3, [pc, #216]	@ (8001b18 <HAL_ADC_ConfigChannel+0x7d4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	4a36      	ldr	r2, [pc, #216]	@ (8001b1c <HAL_ADC_ConfigChannel+0x7d8>)
 8001a44:	fba2 2303 	umull	r2, r3, r2, r3
 8001a48:	099b      	lsrs	r3, r3, #6
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001a56:	e002      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f9      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a64:	e040      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b20 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d118      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d112      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a23      	ldr	r2, [pc, #140]	@ (8001b10 <HAL_ADC_ConfigChannel+0x7cc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d004      	beq.n	8001a90 <HAL_ADC_ConfigChannel+0x74c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a22      	ldr	r2, [pc, #136]	@ (8001b14 <HAL_ADC_ConfigChannel+0x7d0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d12d      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481b      	ldr	r0, [pc, #108]	@ (8001b08 <HAL_ADC_ConfigChannel+0x7c4>)
 8001a9c:	f7ff f989 	bl	8000db2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001aa0:	e024      	b.n	8001aec <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b24 <HAL_ADC_ConfigChannel+0x7e0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d120      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001aac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d11a      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <HAL_ADC_ConfigChannel+0x7cc>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d115      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ac6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001aca:	4619      	mov	r1, r3
 8001acc:	480e      	ldr	r0, [pc, #56]	@ (8001b08 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ace:	f7ff f970 	bl	8000db2 <LL_ADC_SetCommonPathInternalCh>
 8001ad2:	e00c      	b.n	8001aee <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad8:	f043 0220 	orr.w	r2, r3, #32
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001ae6:	e002      	b.n	8001aee <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ae8:	bf00      	nop
 8001aea:	e000      	b.n	8001aee <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001aec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001af6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	37d8      	adds	r7, #216	@ 0xd8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	80080000 	.word	0x80080000
 8001b08:	50040300 	.word	0x50040300
 8001b0c:	c7520000 	.word	0xc7520000
 8001b10:	50040000 	.word	0x50040000
 8001b14:	50040200 	.word	0x50040200
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	053e2d63 	.word	0x053e2d63
 8001b20:	cb840000 	.word	0xcb840000
 8001b24:	80000001 	.word	0x80000001

08001b28 <LL_ADC_IsEnabled>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <LL_ADC_IsEnabled+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_ADC_IsEnabled+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_ADC_REG_IsConversionOngoing>:
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d101      	bne.n	8001b66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b09f      	sub	sp, #124	@ 0x7c
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e093      	b.n	8001cba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a47      	ldr	r2, [pc, #284]	@ (8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d102      	bne.n	8001bb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001bac:	4b46      	ldr	r3, [pc, #280]	@ (8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	e001      	b.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10b      	bne.n	8001bd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e072      	b.n	8001cba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ffb9 	bl	8001b4e <LL_ADC_REG_IsConversionOngoing>
 8001bdc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ffb3 	bl	8001b4e <LL_ADC_REG_IsConversionOngoing>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d154      	bne.n	8001c98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001bee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d151      	bne.n	8001c98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001bf4:	4b35      	ldr	r3, [pc, #212]	@ (8001ccc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d02c      	beq.n	8001c5a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c12:	035b      	lsls	r3, r3, #13
 8001c14:	430b      	orrs	r3, r1
 8001c16:	431a      	orrs	r2, r3
 8001c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c1c:	4829      	ldr	r0, [pc, #164]	@ (8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c1e:	f7ff ff83 	bl	8001b28 <LL_ADC_IsEnabled>
 8001c22:	4604      	mov	r4, r0
 8001c24:	4828      	ldr	r0, [pc, #160]	@ (8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c26:	f7ff ff7f 	bl	8001b28 <LL_ADC_IsEnabled>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	431c      	orrs	r4, r3
 8001c2e:	4828      	ldr	r0, [pc, #160]	@ (8001cd0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001c30:	f7ff ff7a 	bl	8001b28 <LL_ADC_IsEnabled>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4323      	orrs	r3, r4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d137      	bne.n	8001cac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001c44:	f023 030f 	bic.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	6811      	ldr	r1, [r2, #0]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	6892      	ldr	r2, [r2, #8]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c56:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001c58:	e028      	b.n	8001cac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c66:	4817      	ldr	r0, [pc, #92]	@ (8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c68:	f7ff ff5e 	bl	8001b28 <LL_ADC_IsEnabled>
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	4816      	ldr	r0, [pc, #88]	@ (8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c70:	f7ff ff5a 	bl	8001b28 <LL_ADC_IsEnabled>
 8001c74:	4603      	mov	r3, r0
 8001c76:	431c      	orrs	r4, r3
 8001c78:	4815      	ldr	r0, [pc, #84]	@ (8001cd0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001c7a:	f7ff ff55 	bl	8001b28 <LL_ADC_IsEnabled>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4323      	orrs	r3, r4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d112      	bne.n	8001cac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001c8e:	f023 030f 	bic.w	r3, r3, #15
 8001c92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001c96:	e009      	b.n	8001cac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9c:	f043 0220 	orr.w	r2, r3, #32
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001caa:	e000      	b.n	8001cae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001cac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001cb6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	377c      	adds	r7, #124	@ 0x7c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	50040000 	.word	0x50040000
 8001cc8:	50040100 	.word	0x50040100
 8001ccc:	50040300 	.word	0x50040300
 8001cd0:	50040200 	.word	0x50040200

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4907      	ldr	r1, [pc, #28]	@ (8001d70 <__NVIC_EnableIRQ+0x38>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	@ (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	@ (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	@ 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff8e 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff29 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff3e 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff8e 	bl	8001dc8 <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5d 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff31 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	e17f      	b.n	8002208 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8171 	beq.w	8002202 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d005      	beq.n	8001f38 <HAL_GPIO_Init+0x40>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d130      	bne.n	8001f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f6e:	2201      	movs	r2, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f003 0201 	and.w	r2, r3, #1
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d118      	bne.n	8001fd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fac:	2201      	movs	r2, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	f003 0201 	and.w	r2, r3, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d017      	beq.n	8002014 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d123      	bne.n	8002068 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	08da      	lsrs	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3208      	adds	r2, #8
 8002028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	6939      	ldr	r1, [r7, #16]
 8002064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0203 	and.w	r2, r3, #3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80ac 	beq.w	8002202 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <HAL_GPIO_Init+0x330>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002228 <HAL_GPIO_Init+0x330>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002228 <HAL_GPIO_Init+0x330>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020c2:	4a5a      	ldr	r2, [pc, #360]	@ (800222c <HAL_GPIO_Init+0x334>)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020ec:	d025      	beq.n	800213a <HAL_GPIO_Init+0x242>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002230 <HAL_GPIO_Init+0x338>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01f      	beq.n	8002136 <HAL_GPIO_Init+0x23e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002234 <HAL_GPIO_Init+0x33c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d019      	beq.n	8002132 <HAL_GPIO_Init+0x23a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4d      	ldr	r2, [pc, #308]	@ (8002238 <HAL_GPIO_Init+0x340>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0x236>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4c      	ldr	r2, [pc, #304]	@ (800223c <HAL_GPIO_Init+0x344>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00d      	beq.n	800212a <HAL_GPIO_Init+0x232>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4b      	ldr	r2, [pc, #300]	@ (8002240 <HAL_GPIO_Init+0x348>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x22e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4a      	ldr	r2, [pc, #296]	@ (8002244 <HAL_GPIO_Init+0x34c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_GPIO_Init+0x22a>
 800211e:	2306      	movs	r3, #6
 8002120:	e00c      	b.n	800213c <HAL_GPIO_Init+0x244>
 8002122:	2307      	movs	r3, #7
 8002124:	e00a      	b.n	800213c <HAL_GPIO_Init+0x244>
 8002126:	2305      	movs	r3, #5
 8002128:	e008      	b.n	800213c <HAL_GPIO_Init+0x244>
 800212a:	2304      	movs	r3, #4
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x244>
 800212e:	2303      	movs	r3, #3
 8002130:	e004      	b.n	800213c <HAL_GPIO_Init+0x244>
 8002132:	2302      	movs	r3, #2
 8002134:	e002      	b.n	800213c <HAL_GPIO_Init+0x244>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_GPIO_Init+0x244>
 800213a:	2300      	movs	r3, #0
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	f002 0203 	and.w	r2, r2, #3
 8002142:	0092      	lsls	r2, r2, #2
 8002144:	4093      	lsls	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800214c:	4937      	ldr	r1, [pc, #220]	@ (800222c <HAL_GPIO_Init+0x334>)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	3302      	adds	r3, #2
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800215a:	4b3b      	ldr	r3, [pc, #236]	@ (8002248 <HAL_GPIO_Init+0x350>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800217e:	4a32      	ldr	r2, [pc, #200]	@ (8002248 <HAL_GPIO_Init+0x350>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002184:	4b30      	ldr	r3, [pc, #192]	@ (8002248 <HAL_GPIO_Init+0x350>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021a8:	4a27      	ldr	r2, [pc, #156]	@ (8002248 <HAL_GPIO_Init+0x350>)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021ae:	4b26      	ldr	r3, [pc, #152]	@ (8002248 <HAL_GPIO_Init+0x350>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002248 <HAL_GPIO_Init+0x350>)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <HAL_GPIO_Init+0x350>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021fc:	4a12      	ldr	r2, [pc, #72]	@ (8002248 <HAL_GPIO_Init+0x350>)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	f47f ae78 	bne.w	8001f08 <HAL_GPIO_Init+0x10>
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40010000 	.word	0x40010000
 8002230:	48000400 	.word	0x48000400
 8002234:	48000800 	.word	0x48000800
 8002238:	48000c00 	.word	0x48000c00
 800223c:	48001000 	.word	0x48001000
 8002240:	48001400 	.word	0x48001400
 8002244:	48001800 	.word	0x48001800
 8002248:	40010400 	.word	0x40010400

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002268:	e002      	b.n	8002270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43d9      	mvns	r1, r3
 800229a:	887b      	ldrh	r3, [r7, #2]
 800229c:	400b      	ands	r3, r1
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022ba:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022c6:	4a05      	ldr	r2, [pc, #20]	@ (80022dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f910 	bl	80004f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40010400 	.word	0x40010400

080022e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022e4:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40007000 	.word	0x40007000

080022fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800230a:	d130      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800230c:	4b23      	ldr	r3, [pc, #140]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002318:	d038      	beq.n	800238c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002322:	4a1e      	ldr	r2, [pc, #120]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002324:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002328:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800232a:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2232      	movs	r2, #50	@ 0x32
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	4a1b      	ldr	r2, [pc, #108]	@ (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9b      	lsrs	r3, r3, #18
 800233c:	3301      	adds	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002340:	e002      	b.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3b01      	subs	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002348:	4b14      	ldr	r3, [pc, #80]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002354:	d102      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f2      	bne.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800235c:	4b0f      	ldr	r3, [pc, #60]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002368:	d110      	bne.n	800238c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e00f      	b.n	800238e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800236e:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237a:	d007      	beq.n	800238c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800237c:	4b07      	ldr	r3, [pc, #28]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002384:	4a05      	ldr	r2, [pc, #20]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002386:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800238a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40007000 	.word	0x40007000
 80023a0:	20000000 	.word	0x20000000
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e3ca      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ba:	4b97      	ldr	r3, [pc, #604]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c4:	4b94      	ldr	r3, [pc, #592]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80e4 	beq.w	80025a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4a>
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b0c      	cmp	r3, #12
 80023e6:	f040 808b 	bne.w	8002500 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	f040 8087 	bne.w	8002500 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f2:	4b89      	ldr	r3, [pc, #548]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_RCC_OscConfig+0x62>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e3a2      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	4b82      	ldr	r3, [pc, #520]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <HAL_RCC_OscConfig+0x7c>
 800241a:	4b7f      	ldr	r3, [pc, #508]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002422:	e005      	b.n	8002430 <HAL_RCC_OscConfig+0x88>
 8002424:	4b7c      	ldr	r3, [pc, #496]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002430:	4293      	cmp	r3, r2
 8002432:	d223      	bcs.n	800247c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fd55 	bl	8002ee8 <RCC_SetFlashLatencyFromMSIRange>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e383      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002448:	4b73      	ldr	r3, [pc, #460]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a72      	ldr	r2, [pc, #456]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b70      	ldr	r3, [pc, #448]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	496d      	ldr	r1, [pc, #436]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002466:	4b6c      	ldr	r3, [pc, #432]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	4968      	ldr	r1, [pc, #416]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
 800247a:	e025      	b.n	80024c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247c:	4b66      	ldr	r3, [pc, #408]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a65      	ldr	r2, [pc, #404]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002482:	f043 0308 	orr.w	r3, r3, #8
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b63      	ldr	r3, [pc, #396]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4960      	ldr	r1, [pc, #384]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249a:	4b5f      	ldr	r3, [pc, #380]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	495b      	ldr	r1, [pc, #364]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fd15 	bl	8002ee8 <RCC_SetFlashLatencyFromMSIRange>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e343      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c8:	f000 fc4a 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b52      	ldr	r3, [pc, #328]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	4950      	ldr	r1, [pc, #320]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002620 <HAL_RCC_OscConfig+0x278>)
 80024e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fbcd 	bl	8000c8c <HAL_InitTick>
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d052      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	e327      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d032      	beq.n	800256e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002508:	4b43      	ldr	r3, [pc, #268]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a42      	ldr	r2, [pc, #264]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002514:	f7fe fc0a 	bl	8000d2c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800251c:	f7fe fc06 	bl	8000d2c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e310      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252e:	4b3a      	ldr	r3, [pc, #232]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253a:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a36      	ldr	r2, [pc, #216]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b34      	ldr	r3, [pc, #208]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4931      	ldr	r1, [pc, #196]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002558:	4b2f      	ldr	r3, [pc, #188]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	492c      	ldr	r1, [pc, #176]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
 800256c:	e01a      	b.n	80025a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800256e:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a29      	ldr	r2, [pc, #164]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800257a:	f7fe fbd7 	bl	8000d2c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002582:	f7fe fbd3 	bl	8000d2c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e2dd      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002594:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x1da>
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d074      	beq.n	800269a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x21a>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d10e      	bne.n	80025da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d10b      	bne.n	80025da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d064      	beq.n	8002698 <HAL_RCC_OscConfig+0x2f0>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d160      	bne.n	8002698 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e2ba      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x24a>
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e026      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025fa:	d115      	bne.n	8002628 <HAL_RCC_OscConfig+0x280>
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 8002602:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a02      	ldr	r2, [pc, #8]	@ (8002618 <HAL_RCC_OscConfig+0x270>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	08005904 	.word	0x08005904
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004
 8002628:	4ba0      	ldr	r3, [pc, #640]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a9f      	ldr	r2, [pc, #636]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b9d      	ldr	r3, [pc, #628]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a9c      	ldr	r2, [pc, #624]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe fb70 	bl	8000d2c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fb6c 	bl	8000d2c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	@ 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e276      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002662:	4b92      	ldr	r3, [pc, #584]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x2a8>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fb5c 	bl	8000d2c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002678:	f7fe fb58 	bl	8000d2c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	@ 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e262      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268a:	4b88      	ldr	r3, [pc, #544]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x2d0>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d060      	beq.n	8002768 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_OscConfig+0x310>
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d119      	bne.n	80026e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d116      	bne.n	80026e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b8:	4b7c      	ldr	r3, [pc, #496]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_OscConfig+0x328>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e23f      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b76      	ldr	r3, [pc, #472]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	4973      	ldr	r1, [pc, #460]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e4:	e040      	b.n	8002768 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d023      	beq.n	8002736 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ee:	4b6f      	ldr	r3, [pc, #444]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6e      	ldr	r2, [pc, #440]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fb17 	bl	8000d2c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002702:	f7fe fb13 	bl	8000d2c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e21d      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002714:	4b65      	ldr	r3, [pc, #404]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b62      	ldr	r3, [pc, #392]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	495f      	ldr	r1, [pc, #380]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
 8002734:	e018      	b.n	8002768 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002736:	4b5d      	ldr	r3, [pc, #372]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5c      	ldr	r2, [pc, #368]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800273c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe faf3 	bl	8000d2c <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe faef 	bl	8000d2c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1f9      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d03c      	beq.n	80027ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277c:	4b4b      	ldr	r3, [pc, #300]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800277e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002782:	4a4a      	ldr	r2, [pc, #296]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fe face 	bl	8000d2c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002794:	f7fe faca 	bl	8000d2c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e1d4      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a6:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80027a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ef      	beq.n	8002794 <HAL_RCC_OscConfig+0x3ec>
 80027b4:	e01b      	b.n	80027ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80027b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027bc:	4a3b      	ldr	r2, [pc, #236]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe fab1 	bl	8000d2c <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ce:	f7fe faad 	bl	8000d2c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1b7      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e0:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80027e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ef      	bne.n	80027ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80a6 	beq.w	8002948 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002800:	4b2a      	ldr	r3, [pc, #168]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10d      	bne.n	8002828 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b27      	ldr	r3, [pc, #156]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002810:	4a26      	ldr	r2, [pc, #152]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002816:	6593      	str	r3, [r2, #88]	@ 0x58
 8002818:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002824:	2301      	movs	r3, #1
 8002826:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002828:	4b21      	ldr	r3, [pc, #132]	@ (80028b0 <HAL_RCC_OscConfig+0x508>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d118      	bne.n	8002866 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002834:	4b1e      	ldr	r3, [pc, #120]	@ (80028b0 <HAL_RCC_OscConfig+0x508>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <HAL_RCC_OscConfig+0x508>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800283e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002840:	f7fe fa74 	bl	8000d2c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe fa70 	bl	8000d2c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e17a      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285a:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <HAL_RCC_OscConfig+0x508>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d108      	bne.n	8002880 <HAL_RCC_OscConfig+0x4d8>
 800286e:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002874:	4a0d      	ldr	r2, [pc, #52]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800287e:	e029      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b05      	cmp	r3, #5
 8002886:	d115      	bne.n	80028b4 <HAL_RCC_OscConfig+0x50c>
 8002888:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	4a07      	ldr	r2, [pc, #28]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002898:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289e:	4a03      	ldr	r2, [pc, #12]	@ (80028ac <HAL_RCC_OscConfig+0x504>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40007000 	.word	0x40007000
 80028b4:	4b9c      	ldr	r3, [pc, #624]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ba:	4a9b      	ldr	r2, [pc, #620]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028c4:	4b98      	ldr	r3, [pc, #608]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ca:	4a97      	ldr	r2, [pc, #604]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d016      	beq.n	800290a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe fa26 	bl	8000d2c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe fa22 	bl	8000d2c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e12a      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ed      	beq.n	80028e4 <HAL_RCC_OscConfig+0x53c>
 8002908:	e015      	b.n	8002936 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe fa0f 	bl	8000d2c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fa0b 	bl	8000d2c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e113      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002928:	4b7f      	ldr	r3, [pc, #508]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ed      	bne.n	8002912 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002936:	7ffb      	ldrb	r3, [r7, #31]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293c:	4b7a      	ldr	r3, [pc, #488]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002940:	4a79      	ldr	r2, [pc, #484]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002946:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80fe 	beq.w	8002b4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	2b02      	cmp	r3, #2
 8002958:	f040 80d0 	bne.w	8002afc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800295c:	4b72      	ldr	r3, [pc, #456]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296c:	429a      	cmp	r2, r3
 800296e:	d130      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	3b01      	subs	r3, #1
 800297c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d127      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d11f      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800299c:	2a07      	cmp	r2, #7
 800299e:	bf14      	ite	ne
 80029a0:	2201      	movne	r2, #1
 80029a2:	2200      	moveq	r2, #0
 80029a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d113      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	3b01      	subs	r3, #1
 80029b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d06e      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	d069      	beq.n	8002aac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029d8:	4b53      	ldr	r3, [pc, #332]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029e4:	4b50      	ldr	r3, [pc, #320]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0ad      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a00:	f7fe f994 	bl	8000d2c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe f990 	bl	8000d2c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e09a      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1a:	4b43      	ldr	r3, [pc, #268]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a26:	4b40      	ldr	r3, [pc, #256]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	4b40      	ldr	r3, [pc, #256]	@ (8002b2c <HAL_RCC_OscConfig+0x784>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a36:	3a01      	subs	r2, #1
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a40:	0212      	lsls	r2, r2, #8
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a48:	0852      	lsrs	r2, r2, #1
 8002a4a:	3a01      	subs	r2, #1
 8002a4c:	0552      	lsls	r2, r2, #21
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a54:	0852      	lsrs	r2, r2, #1
 8002a56:	3a01      	subs	r2, #1
 8002a58:	0652      	lsls	r2, r2, #25
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a60:	0912      	lsrs	r2, r2, #4
 8002a62:	0452      	lsls	r2, r2, #17
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4930      	ldr	r1, [pc, #192]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2d      	ldr	r2, [pc, #180]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a84:	f7fe f952 	bl	8000d2c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe f94e 	bl	8000d2c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e058      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aaa:	e050      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e04f      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d148      	bne.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac8:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a16      	ldr	r2, [pc, #88]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ad2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ad4:	f7fe f92a 	bl	8000d2c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe f926 	bl	8000d2c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e030      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x734>
 8002afa:	e028      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d023      	beq.n	8002b4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a08      	ldr	r2, [pc, #32]	@ (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002b08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7fe f90d 	bl	8000d2c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b14:	e00c      	b.n	8002b30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe f909 	bl	8000d2c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d905      	bls.n	8002b30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e013      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_RCC_OscConfig+0x7b0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ec      	bne.n	8002b16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCC_OscConfig+0x7b0>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	4905      	ldr	r1, [pc, #20]	@ (8002b58 <HAL_RCC_OscConfig+0x7b0>)
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <HAL_RCC_OscConfig+0x7b4>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	60cb      	str	r3, [r1, #12]
 8002b48:	e001      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	feeefffc 	.word	0xfeeefffc

08002b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0e7      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b75      	ldr	r3, [pc, #468]	@ (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d910      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b72      	ldr	r3, [pc, #456]	@ (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 0207 	bic.w	r2, r3, #7
 8002b8a:	4970      	ldr	r1, [pc, #448]	@ (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b6e      	ldr	r3, [pc, #440]	@ (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0cf      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	4b66      	ldr	r3, [pc, #408]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d908      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b63      	ldr	r3, [pc, #396]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4960      	ldr	r1, [pc, #384]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d04c      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d121      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0a6      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfe:	4b54      	ldr	r3, [pc, #336]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d115      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e09a      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c16:	4b4e      	ldr	r3, [pc, #312]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e08e      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c26:	4b4a      	ldr	r3, [pc, #296]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e086      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	4b46      	ldr	r3, [pc, #280]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4943      	ldr	r1, [pc, #268]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c48:	f7fe f870 	bl	8000d2c <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fe f86c 	bl	8000d2c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e06e      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b3a      	ldr	r3, [pc, #232]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d208      	bcs.n	8002ca6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b2e      	ldr	r3, [pc, #184]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	492b      	ldr	r1, [pc, #172]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca6:	4b29      	ldr	r3, [pc, #164]	@ (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d210      	bcs.n	8002cd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb4:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 0207 	bic.w	r2, r3, #7
 8002cbc:	4923      	ldr	r1, [pc, #140]	@ (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc4:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e036      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	4918      	ldr	r1, [pc, #96]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d00:	4b13      	ldr	r3, [pc, #76]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4910      	ldr	r1, [pc, #64]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d14:	f000 f824 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	490b      	ldr	r1, [pc, #44]	@ (8002d54 <HAL_RCC_ClockConfig+0x1f4>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	4a09      	ldr	r2, [pc, #36]	@ (8002d58 <HAL_RCC_ClockConfig+0x1f8>)
 8002d32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d34:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <HAL_RCC_ClockConfig+0x1fc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd ffa7 	bl	8000c8c <HAL_InitTick>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d42:	7afb      	ldrb	r3, [r7, #11]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08005904 	.word	0x08005904
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	@ 0x24
 8002d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d78:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x34>
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d121      	bne.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d11e      	bne.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d94:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002da0:	4b31      	ldr	r3, [pc, #196]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e005      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002db0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d102      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dd8:	4b25      	ldr	r3, [pc, #148]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e004      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002de4:	4b23      	ldr	r3, [pc, #140]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d134      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dee:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d003      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0xac>
 8002e04:	e005      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e06:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e08:	617b      	str	r3, [r7, #20]
      break;
 8002e0a:	e005      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e0c:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e0e:	617b      	str	r3, [r7, #20]
      break;
 8002e10:	e002      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	617b      	str	r3, [r7, #20]
      break;
 8002e16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e18:	4b13      	ldr	r3, [pc, #76]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	3301      	adds	r3, #1
 8002e24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	fb03 f202 	mul.w	r2, r3, r2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	0e5b      	lsrs	r3, r3, #25
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e58:	69bb      	ldr	r3, [r7, #24]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	@ 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	0800591c 	.word	0x0800591c
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e94:	f7ff fff0 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4904      	ldr	r1, [pc, #16]	@ (8002eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08005914 	.word	0x08005914

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ec0:	f7ff ffda 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0adb      	lsrs	r3, r3, #11
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4904      	ldr	r1, [pc, #16]	@ (8002ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08005914 	.word	0x08005914

08002ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f00:	f7ff f9ee 	bl	80022e0 <HAL_PWREx_GetVoltageRange>
 8002f04:	6178      	str	r0, [r7, #20]
 8002f06:	e014      	b.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b25      	ldr	r3, [pc, #148]	@ (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	4a24      	ldr	r2, [pc, #144]	@ (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f14:	4b22      	ldr	r3, [pc, #136]	@ (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f20:	f7ff f9de 	bl	80022e0 <HAL_PWREx_GetVoltageRange>
 8002f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f38:	d10b      	bne.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b80      	cmp	r3, #128	@ 0x80
 8002f3e:	d919      	bls.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f44:	d902      	bls.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f46:	2302      	movs	r3, #2
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	e013      	b.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e010      	b.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b80      	cmp	r3, #128	@ 0x80
 8002f56:	d902      	bls.n	8002f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f58:	2303      	movs	r3, #3
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	e00a      	b.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b80      	cmp	r3, #128	@ 0x80
 8002f62:	d102      	bne.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f64:	2302      	movs	r3, #2
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e004      	b.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b70      	cmp	r3, #112	@ 0x70
 8002f6e:	d101      	bne.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f70:	2301      	movs	r3, #1
 8002f72:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 0207 	bic.w	r2, r3, #7
 8002f7c:	4909      	ldr	r1, [pc, #36]	@ (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f84:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40022000 	.word	0x40022000

08002fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d041      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fcc:	d02a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fd2:	d824      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fd8:	d008      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fde:	d81e      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fe4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fe8:	d010      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fea:	e018      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fec:	4b86      	ldr	r3, [pc, #536]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a85      	ldr	r2, [pc, #532]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff8:	e015      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fabb 	bl	800357c <RCCEx_PLLSAI1_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300a:	e00c      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3320      	adds	r3, #32
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fba6 	bl	8003764 <RCCEx_PLLSAI2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800301c:	e003      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	74fb      	strb	r3, [r7, #19]
      break;
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800302c:	4b76      	ldr	r3, [pc, #472]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003032:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800303a:	4973      	ldr	r1, [pc, #460]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003042:	e001      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d041      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003058:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800305c:	d02a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800305e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003062:	d824      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003068:	d008      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800306a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800306e:	d81e      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003078:	d010      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800307a:	e018      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800307c:	4b62      	ldr	r3, [pc, #392]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a61      	ldr	r2, [pc, #388]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003086:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003088:	e015      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fa73 	bl	800357c <RCCEx_PLLSAI1_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800309a:	e00c      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3320      	adds	r3, #32
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fb5e 	bl	8003764 <RCCEx_PLLSAI2_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ac:	e003      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	74fb      	strb	r3, [r7, #19]
      break;
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030bc:	4b52      	ldr	r3, [pc, #328]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ca:	494f      	ldr	r1, [pc, #316]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030d2:	e001      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80a0 	beq.w	8003226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ea:	4b47      	ldr	r3, [pc, #284]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030fa:	2300      	movs	r3, #0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	4b41      	ldr	r3, [pc, #260]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003104:	4a40      	ldr	r2, [pc, #256]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310a:	6593      	str	r3, [r2, #88]	@ 0x58
 800310c:	4b3e      	ldr	r3, [pc, #248]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003118:	2301      	movs	r3, #1
 800311a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311c:	4b3b      	ldr	r3, [pc, #236]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3a      	ldr	r2, [pc, #232]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003128:	f7fd fe00 	bl	8000d2c <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800312e:	e009      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7fd fdfc 	bl	8000d2c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d902      	bls.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	74fb      	strb	r3, [r7, #19]
        break;
 8003142:	e005      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003144:	4b31      	ldr	r3, [pc, #196]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ef      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d15c      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003156:	4b2c      	ldr	r3, [pc, #176]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003160:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01f      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	429a      	cmp	r2, r3
 8003172:	d019      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003174:	4b24      	ldr	r3, [pc, #144]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003180:	4b21      	ldr	r3, [pc, #132]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003186:	4a20      	ldr	r2, [pc, #128]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003190:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003196:	4a1c      	ldr	r2, [pc, #112]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031a0:	4a19      	ldr	r2, [pc, #100]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fd fdbb 	bl	8000d2c <HAL_GetTick>
 80031b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b8:	e00b      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fd fdb7 	bl	8000d2c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d902      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	74fb      	strb	r3, [r7, #19]
            break;
 80031d0:	e006      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ec      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e6:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031f6:	4904      	ldr	r1, [pc, #16]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031fe:	e009      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	74bb      	strb	r3, [r7, #18]
 8003204:	e006      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003214:	7c7b      	ldrb	r3, [r7, #17]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d105      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	4b9e      	ldr	r3, [pc, #632]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321e:	4a9d      	ldr	r2, [pc, #628]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003224:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003232:	4b98      	ldr	r3, [pc, #608]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	f023 0203 	bic.w	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	4994      	ldr	r1, [pc, #592]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003254:	4b8f      	ldr	r3, [pc, #572]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	f023 020c 	bic.w	r2, r3, #12
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	498c      	ldr	r1, [pc, #560]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003276:	4b87      	ldr	r3, [pc, #540]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	4983      	ldr	r1, [pc, #524]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003298:	4b7e      	ldr	r3, [pc, #504]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	497b      	ldr	r1, [pc, #492]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ba:	4b76      	ldr	r3, [pc, #472]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c8:	4972      	ldr	r1, [pc, #456]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ea:	496a      	ldr	r1, [pc, #424]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fe:	4b65      	ldr	r3, [pc, #404]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003304:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	4961      	ldr	r1, [pc, #388]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003320:	4b5c      	ldr	r3, [pc, #368]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003326:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332e:	4959      	ldr	r1, [pc, #356]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003342:	4b54      	ldr	r3, [pc, #336]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003348:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003350:	4950      	ldr	r1, [pc, #320]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003364:	4b4b      	ldr	r3, [pc, #300]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003372:	4948      	ldr	r1, [pc, #288]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003386:	4b43      	ldr	r3, [pc, #268]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	493f      	ldr	r1, [pc, #252]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d028      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b6:	4937      	ldr	r1, [pc, #220]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033c6:	d106      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c8:	4b32      	ldr	r3, [pc, #200]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a31      	ldr	r2, [pc, #196]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033d2:	60d3      	str	r3, [r2, #12]
 80033d4:	e011      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033de:	d10c      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f8c8 	bl	800357c <RCCEx_PLLSAI1_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d028      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003406:	4b23      	ldr	r3, [pc, #140]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003414:	491f      	ldr	r1, [pc, #124]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003424:	d106      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003426:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003430:	60d3      	str	r3, [r2, #12]
 8003432:	e011      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003438:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800343c:	d10c      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3304      	adds	r3, #4
 8003442:	2101      	movs	r1, #1
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f899 	bl	800357c <RCCEx_PLLSAI1_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d02b      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003472:	4908      	ldr	r1, [pc, #32]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003482:	d109      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003484:	4b03      	ldr	r3, [pc, #12]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a02      	ldr	r2, [pc, #8]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800348e:	60d3      	str	r3, [r2, #12]
 8003490:	e014      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f867 	bl	800357c <RCCEx_PLLSAI1_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02f      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034d6:	4928      	ldr	r1, [pc, #160]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034e6:	d10d      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	2102      	movs	r1, #2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f844 	bl	800357c <RCCEx_PLLSAI1_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d014      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	74bb      	strb	r3, [r7, #18]
 8003502:	e011      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800350c:	d10c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3320      	adds	r3, #32
 8003512:	2102      	movs	r1, #2
 8003514:	4618      	mov	r0, r3
 8003516:	f000 f925 	bl	8003764 <RCCEx_PLLSAI2_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003534:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003542:	490d      	ldr	r1, [pc, #52]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003556:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003566:	4904      	ldr	r1, [pc, #16]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800356e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000

0800357c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800358a:	4b75      	ldr	r3, [pc, #468]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d018      	beq.n	80035c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003596:	4b72      	ldr	r3, [pc, #456]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0203 	and.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d10d      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
       ||
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
       ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d047      	beq.n	8003652 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	e044      	b.n	8003652 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d018      	beq.n	8003602 <RCCEx_PLLSAI1_Config+0x86>
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d825      	bhi.n	8003620 <RCCEx_PLLSAI1_Config+0xa4>
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d002      	beq.n	80035de <RCCEx_PLLSAI1_Config+0x62>
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d009      	beq.n	80035f0 <RCCEx_PLLSAI1_Config+0x74>
 80035dc:	e020      	b.n	8003620 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035de:	4b60      	ldr	r3, [pc, #384]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d11d      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ee:	e01a      	b.n	8003626 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d116      	bne.n	800362a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003600:	e013      	b.n	800362a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003602:	4b57      	ldr	r3, [pc, #348]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800360e:	4b54      	ldr	r3, [pc, #336]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800361e:	e006      	b.n	800362e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      break;
 8003624:	e004      	b.n	8003630 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003626:	bf00      	nop
 8003628:	e002      	b.n	8003630 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800362e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10d      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003636:	4b4a      	ldr	r3, [pc, #296]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	430b      	orrs	r3, r1
 800364c:	4944      	ldr	r1, [pc, #272]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d17d      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003658:	4b41      	ldr	r3, [pc, #260]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a40      	ldr	r2, [pc, #256]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003664:	f7fd fb62 	bl	8000d2c <HAL_GetTick>
 8003668:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800366a:	e009      	b.n	8003680 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800366c:	f7fd fb5e 	bl	8000d2c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d902      	bls.n	8003680 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	73fb      	strb	r3, [r7, #15]
        break;
 800367e:	e005      	b.n	800368c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003680:	4b37      	ldr	r3, [pc, #220]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ef      	bne.n	800366c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d160      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d111      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003698:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80036a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6892      	ldr	r2, [r2, #8]
 80036a8:	0211      	lsls	r1, r2, #8
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68d2      	ldr	r2, [r2, #12]
 80036ae:	0912      	lsrs	r2, r2, #4
 80036b0:	0452      	lsls	r2, r2, #17
 80036b2:	430a      	orrs	r2, r1
 80036b4:	492a      	ldr	r1, [pc, #168]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	610b      	str	r3, [r1, #16]
 80036ba:	e027      	b.n	800370c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d112      	bne.n	80036e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c2:	4b27      	ldr	r3, [pc, #156]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80036ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6892      	ldr	r2, [r2, #8]
 80036d2:	0211      	lsls	r1, r2, #8
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6912      	ldr	r2, [r2, #16]
 80036d8:	0852      	lsrs	r2, r2, #1
 80036da:	3a01      	subs	r2, #1
 80036dc:	0552      	lsls	r2, r2, #21
 80036de:	430a      	orrs	r2, r1
 80036e0:	491f      	ldr	r1, [pc, #124]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]
 80036e6:	e011      	b.n	800370c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	0211      	lsls	r1, r2, #8
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6952      	ldr	r2, [r2, #20]
 80036fe:	0852      	lsrs	r2, r2, #1
 8003700:	3a01      	subs	r2, #1
 8003702:	0652      	lsls	r2, r2, #25
 8003704:	430a      	orrs	r2, r1
 8003706:	4916      	ldr	r1, [pc, #88]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800370c:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a13      	ldr	r2, [pc, #76]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003712:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003716:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd fb08 	bl	8000d2c <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800371e:	e009      	b.n	8003734 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003720:	f7fd fb04 	bl	8000d2c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	73fb      	strb	r3, [r7, #15]
          break;
 8003732:	e005      	b.n	8003740 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003734:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003746:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	4904      	ldr	r1, [pc, #16]	@ (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000

08003764 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003772:	4b6a      	ldr	r3, [pc, #424]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d018      	beq.n	80037b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800377e:	4b67      	ldr	r3, [pc, #412]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0203 	and.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d10d      	bne.n	80037aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
       ||
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003796:	4b61      	ldr	r3, [pc, #388]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
       ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d047      	beq.n	800383a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	e044      	b.n	800383a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d018      	beq.n	80037ea <RCCEx_PLLSAI2_Config+0x86>
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d825      	bhi.n	8003808 <RCCEx_PLLSAI2_Config+0xa4>
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d002      	beq.n	80037c6 <RCCEx_PLLSAI2_Config+0x62>
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d009      	beq.n	80037d8 <RCCEx_PLLSAI2_Config+0x74>
 80037c4:	e020      	b.n	8003808 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037c6:	4b55      	ldr	r3, [pc, #340]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11d      	bne.n	800380e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d6:	e01a      	b.n	800380e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037d8:	4b50      	ldr	r3, [pc, #320]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e8:	e013      	b.n	8003812 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ea:	4b4c      	ldr	r3, [pc, #304]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037f6:	4b49      	ldr	r3, [pc, #292]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003806:	e006      	b.n	8003816 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
      break;
 800380c:	e004      	b.n	8003818 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800380e:	bf00      	nop
 8003810:	e002      	b.n	8003818 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003816:	bf00      	nop
    }

    if(status == HAL_OK)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800381e:	4b3f      	ldr	r3, [pc, #252]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6819      	ldr	r1, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	3b01      	subs	r3, #1
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	430b      	orrs	r3, r1
 8003834:	4939      	ldr	r1, [pc, #228]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d167      	bne.n	8003910 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003840:	4b36      	ldr	r3, [pc, #216]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a35      	ldr	r2, [pc, #212]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800384a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fd fa6e 	bl	8000d2c <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003852:	e009      	b.n	8003868 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003854:	f7fd fa6a 	bl	8000d2c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	73fb      	strb	r3, [r7, #15]
        break;
 8003866:	e005      	b.n	8003874 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003868:	4b2c      	ldr	r3, [pc, #176]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ef      	bne.n	8003854 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d14a      	bne.n	8003910 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d111      	bne.n	80038a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003880:	4b26      	ldr	r3, [pc, #152]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003888:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6892      	ldr	r2, [r2, #8]
 8003890:	0211      	lsls	r1, r2, #8
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68d2      	ldr	r2, [r2, #12]
 8003896:	0912      	lsrs	r2, r2, #4
 8003898:	0452      	lsls	r2, r2, #17
 800389a:	430a      	orrs	r2, r1
 800389c:	491f      	ldr	r1, [pc, #124]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	614b      	str	r3, [r1, #20]
 80038a2:	e011      	b.n	80038c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038a4:	4b1d      	ldr	r3, [pc, #116]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6892      	ldr	r2, [r2, #8]
 80038b4:	0211      	lsls	r1, r2, #8
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6912      	ldr	r2, [r2, #16]
 80038ba:	0852      	lsrs	r2, r2, #1
 80038bc:	3a01      	subs	r2, #1
 80038be:	0652      	lsls	r2, r2, #25
 80038c0:	430a      	orrs	r2, r1
 80038c2:	4916      	ldr	r1, [pc, #88]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038c8:	4b14      	ldr	r3, [pc, #80]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a13      	ldr	r2, [pc, #76]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fd fa2a 	bl	8000d2c <HAL_GetTick>
 80038d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038da:	e009      	b.n	80038f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038dc:	f7fd fa26 	bl	8000d2c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d902      	bls.n	80038f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	73fb      	strb	r3, [r7, #15]
          break;
 80038ee:	e005      	b.n	80038fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038f0:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ef      	beq.n	80038dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003902:	4b06      	ldr	r3, [pc, #24]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	4904      	ldr	r1, [pc, #16]	@ (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000

08003920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e040      	b.n	80039b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd f86e 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	@ 0x24
 800394c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fae0 	bl	8003f2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f825 	bl	80039bc <UART_SetConfig>
 8003972:	4603      	mov	r3, r0
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e01b      	b.n	80039b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800398a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800399a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fb5f 	bl	8004070 <UART_CheckIdleState>
 80039b2:	4603      	mov	r3, r0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c0:	b08a      	sub	sp, #40	@ 0x28
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	431a      	orrs	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4ba4      	ldr	r3, [pc, #656]	@ (8003c7c <UART_SetConfig+0x2c0>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a99      	ldr	r2, [pc, #612]	@ (8003c80 <UART_SetConfig+0x2c4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a24:	4313      	orrs	r3, r2
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a90      	ldr	r2, [pc, #576]	@ (8003c84 <UART_SetConfig+0x2c8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d126      	bne.n	8003a94 <UART_SetConfig+0xd8>
 8003a46:	4b90      	ldr	r3, [pc, #576]	@ (8003c88 <UART_SetConfig+0x2cc>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d81b      	bhi.n	8003a8c <UART_SetConfig+0xd0>
 8003a54:	a201      	add	r2, pc, #4	@ (adr r2, 8003a5c <UART_SetConfig+0xa0>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a7d 	.word	0x08003a7d
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a85 	.word	0x08003a85
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a72:	e116      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7a:	e112      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a82:	e10e      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a84:	2308      	movs	r3, #8
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8a:	e10a      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a92:	e106      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a7c      	ldr	r2, [pc, #496]	@ (8003c8c <UART_SetConfig+0x2d0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d138      	bne.n	8003b10 <UART_SetConfig+0x154>
 8003a9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c88 <UART_SetConfig+0x2cc>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b0c      	cmp	r3, #12
 8003aaa:	d82d      	bhi.n	8003b08 <UART_SetConfig+0x14c>
 8003aac:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab4 <UART_SetConfig+0xf8>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ae9 	.word	0x08003ae9
 8003ab8:	08003b09 	.word	0x08003b09
 8003abc:	08003b09 	.word	0x08003b09
 8003ac0:	08003b09 	.word	0x08003b09
 8003ac4:	08003af9 	.word	0x08003af9
 8003ac8:	08003b09 	.word	0x08003b09
 8003acc:	08003b09 	.word	0x08003b09
 8003ad0:	08003b09 	.word	0x08003b09
 8003ad4:	08003af1 	.word	0x08003af1
 8003ad8:	08003b09 	.word	0x08003b09
 8003adc:	08003b09 	.word	0x08003b09
 8003ae0:	08003b09 	.word	0x08003b09
 8003ae4:	08003b01 	.word	0x08003b01
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e0d8      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af6:	e0d4      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003af8:	2304      	movs	r3, #4
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afe:	e0d0      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b00:	2308      	movs	r3, #8
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e0cc      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0e:	e0c8      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5e      	ldr	r2, [pc, #376]	@ (8003c90 <UART_SetConfig+0x2d4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d125      	bne.n	8003b66 <UART_SetConfig+0x1aa>
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c88 <UART_SetConfig+0x2cc>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b24:	2b30      	cmp	r3, #48	@ 0x30
 8003b26:	d016      	beq.n	8003b56 <UART_SetConfig+0x19a>
 8003b28:	2b30      	cmp	r3, #48	@ 0x30
 8003b2a:	d818      	bhi.n	8003b5e <UART_SetConfig+0x1a2>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d00a      	beq.n	8003b46 <UART_SetConfig+0x18a>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d814      	bhi.n	8003b5e <UART_SetConfig+0x1a2>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <UART_SetConfig+0x182>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d008      	beq.n	8003b4e <UART_SetConfig+0x192>
 8003b3c:	e00f      	b.n	8003b5e <UART_SetConfig+0x1a2>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b44:	e0ad      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b46:	2302      	movs	r3, #2
 8003b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4c:	e0a9      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b4e:	2304      	movs	r3, #4
 8003b50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b54:	e0a5      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b56:	2308      	movs	r3, #8
 8003b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5c:	e0a1      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b5e:	2310      	movs	r3, #16
 8003b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b64:	e09d      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c94 <UART_SetConfig+0x2d8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d125      	bne.n	8003bbc <UART_SetConfig+0x200>
 8003b70:	4b45      	ldr	r3, [pc, #276]	@ (8003c88 <UART_SetConfig+0x2cc>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b7c:	d016      	beq.n	8003bac <UART_SetConfig+0x1f0>
 8003b7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b80:	d818      	bhi.n	8003bb4 <UART_SetConfig+0x1f8>
 8003b82:	2b80      	cmp	r3, #128	@ 0x80
 8003b84:	d00a      	beq.n	8003b9c <UART_SetConfig+0x1e0>
 8003b86:	2b80      	cmp	r3, #128	@ 0x80
 8003b88:	d814      	bhi.n	8003bb4 <UART_SetConfig+0x1f8>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <UART_SetConfig+0x1d8>
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	d008      	beq.n	8003ba4 <UART_SetConfig+0x1e8>
 8003b92:	e00f      	b.n	8003bb4 <UART_SetConfig+0x1f8>
 8003b94:	2300      	movs	r3, #0
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e082      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e07e      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003baa:	e07a      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003bac:	2308      	movs	r3, #8
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb2:	e076      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bba:	e072      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a35      	ldr	r2, [pc, #212]	@ (8003c98 <UART_SetConfig+0x2dc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d12a      	bne.n	8003c1c <UART_SetConfig+0x260>
 8003bc6:	4b30      	ldr	r3, [pc, #192]	@ (8003c88 <UART_SetConfig+0x2cc>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd4:	d01a      	beq.n	8003c0c <UART_SetConfig+0x250>
 8003bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bda:	d81b      	bhi.n	8003c14 <UART_SetConfig+0x258>
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be0:	d00c      	beq.n	8003bfc <UART_SetConfig+0x240>
 8003be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be6:	d815      	bhi.n	8003c14 <UART_SetConfig+0x258>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <UART_SetConfig+0x238>
 8003bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf0:	d008      	beq.n	8003c04 <UART_SetConfig+0x248>
 8003bf2:	e00f      	b.n	8003c14 <UART_SetConfig+0x258>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	e052      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c02:	e04e      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c04:	2304      	movs	r3, #4
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0a:	e04a      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c12:	e046      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c14:	2310      	movs	r3, #16
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1a:	e042      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a17      	ldr	r2, [pc, #92]	@ (8003c80 <UART_SetConfig+0x2c4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d13a      	bne.n	8003c9c <UART_SetConfig+0x2e0>
 8003c26:	4b18      	ldr	r3, [pc, #96]	@ (8003c88 <UART_SetConfig+0x2cc>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c34:	d01a      	beq.n	8003c6c <UART_SetConfig+0x2b0>
 8003c36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c3a:	d81b      	bhi.n	8003c74 <UART_SetConfig+0x2b8>
 8003c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c40:	d00c      	beq.n	8003c5c <UART_SetConfig+0x2a0>
 8003c42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c46:	d815      	bhi.n	8003c74 <UART_SetConfig+0x2b8>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <UART_SetConfig+0x298>
 8003c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c50:	d008      	beq.n	8003c64 <UART_SetConfig+0x2a8>
 8003c52:	e00f      	b.n	8003c74 <UART_SetConfig+0x2b8>
 8003c54:	2300      	movs	r3, #0
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5a:	e022      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c62:	e01e      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c64:	2304      	movs	r3, #4
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6a:	e01a      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c72:	e016      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c74:	2310      	movs	r3, #16
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7a:	e012      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c7c:	efff69f3 	.word	0xefff69f3
 8003c80:	40008000 	.word	0x40008000
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40004400 	.word	0x40004400
 8003c90:	40004800 	.word	0x40004800
 8003c94:	40004c00 	.word	0x40004c00
 8003c98:	40005000 	.word	0x40005000
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a9f      	ldr	r2, [pc, #636]	@ (8003f24 <UART_SetConfig+0x568>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d17a      	bne.n	8003da2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d824      	bhi.n	8003cfe <UART_SetConfig+0x342>
 8003cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cbc <UART_SetConfig+0x300>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003ce1 	.word	0x08003ce1
 8003cc0:	08003cff 	.word	0x08003cff
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003cff 	.word	0x08003cff
 8003ccc:	08003cef 	.word	0x08003cef
 8003cd0:	08003cff 	.word	0x08003cff
 8003cd4:	08003cff 	.word	0x08003cff
 8003cd8:	08003cff 	.word	0x08003cff
 8003cdc:	08003cf7 	.word	0x08003cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce0:	f7ff f8d6 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8003ce4:	61f8      	str	r0, [r7, #28]
        break;
 8003ce6:	e010      	b.n	8003d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce8:	4b8f      	ldr	r3, [pc, #572]	@ (8003f28 <UART_SetConfig+0x56c>)
 8003cea:	61fb      	str	r3, [r7, #28]
        break;
 8003cec:	e00d      	b.n	8003d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cee:	f7ff f837 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8003cf2:	61f8      	str	r0, [r7, #28]
        break;
 8003cf4:	e009      	b.n	8003d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cfa:	61fb      	str	r3, [r7, #28]
        break;
 8003cfc:	e005      	b.n	8003d0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80fb 	beq.w	8003f08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d305      	bcc.n	8003d2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d903      	bls.n	8003d36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d34:	e0e8      	b.n	8003f08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	461c      	mov	r4, r3
 8003d3c:	4615      	mov	r5, r2
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	022b      	lsls	r3, r5, #8
 8003d48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d4c:	0222      	lsls	r2, r4, #8
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	6849      	ldr	r1, [r1, #4]
 8003d52:	0849      	lsrs	r1, r1, #1
 8003d54:	2000      	movs	r0, #0
 8003d56:	4688      	mov	r8, r1
 8003d58:	4681      	mov	r9, r0
 8003d5a:	eb12 0a08 	adds.w	sl, r2, r8
 8003d5e:	eb43 0b09 	adc.w	fp, r3, r9
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d70:	4650      	mov	r0, sl
 8003d72:	4659      	mov	r1, fp
 8003d74:	f7fc fa2c 	bl	80001d0 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d86:	d308      	bcc.n	8003d9a <UART_SetConfig+0x3de>
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d8e:	d204      	bcs.n	8003d9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	60da      	str	r2, [r3, #12]
 8003d98:	e0b6      	b.n	8003f08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003da0:	e0b2      	b.n	8003f08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003daa:	d15e      	bne.n	8003e6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003dac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d828      	bhi.n	8003e06 <UART_SetConfig+0x44a>
 8003db4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <UART_SetConfig+0x400>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003df1 	.word	0x08003df1
 8003dc8:	08003e07 	.word	0x08003e07
 8003dcc:	08003df7 	.word	0x08003df7
 8003dd0:	08003e07 	.word	0x08003e07
 8003dd4:	08003e07 	.word	0x08003e07
 8003dd8:	08003e07 	.word	0x08003e07
 8003ddc:	08003dff 	.word	0x08003dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de0:	f7ff f856 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8003de4:	61f8      	str	r0, [r7, #28]
        break;
 8003de6:	e014      	b.n	8003e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7ff f868 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8003dec:	61f8      	str	r0, [r7, #28]
        break;
 8003dee:	e010      	b.n	8003e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df0:	4b4d      	ldr	r3, [pc, #308]	@ (8003f28 <UART_SetConfig+0x56c>)
 8003df2:	61fb      	str	r3, [r7, #28]
        break;
 8003df4:	e00d      	b.n	8003e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df6:	f7fe ffb3 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8003dfa:	61f8      	str	r0, [r7, #28]
        break;
 8003dfc:	e009      	b.n	8003e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e02:	61fb      	str	r3, [r7, #28]
        break;
 8003e04:	e005      	b.n	8003e12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d077      	beq.n	8003f08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	005a      	lsls	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	441a      	add	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b0f      	cmp	r3, #15
 8003e32:	d916      	bls.n	8003e62 <UART_SetConfig+0x4a6>
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e3a:	d212      	bcs.n	8003e62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f023 030f 	bic.w	r3, r3, #15
 8003e44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	8afb      	ldrh	r3, [r7, #22]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	8afa      	ldrh	r2, [r7, #22]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e052      	b.n	8003f08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e68:	e04e      	b.n	8003f08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d827      	bhi.n	8003ec2 <UART_SetConfig+0x506>
 8003e72:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <UART_SetConfig+0x4bc>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003eb3 	.word	0x08003eb3
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ec3 	.word	0x08003ec3
 8003e94:	08003ec3 	.word	0x08003ec3
 8003e98:	08003ebb 	.word	0x08003ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe fff8 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	61f8      	str	r0, [r7, #28]
        break;
 8003ea2:	e014      	b.n	8003ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea4:	f7ff f80a 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8003ea8:	61f8      	str	r0, [r7, #28]
        break;
 8003eaa:	e010      	b.n	8003ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b1e      	ldr	r3, [pc, #120]	@ (8003f28 <UART_SetConfig+0x56c>)
 8003eae:	61fb      	str	r3, [r7, #28]
        break;
 8003eb0:	e00d      	b.n	8003ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe ff55 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8003eb6:	61f8      	str	r0, [r7, #28]
        break;
 8003eb8:	e009      	b.n	8003ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ebe:	61fb      	str	r3, [r7, #28]
        break;
 8003ec0:	e005      	b.n	8003ece <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d019      	beq.n	8003f08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	085a      	lsrs	r2, r3, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	441a      	add	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d909      	bls.n	8003f02 <UART_SetConfig+0x546>
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef4:	d205      	bcs.n	8003f02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	e002      	b.n	8003f08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3728      	adds	r7, #40	@ 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f22:	bf00      	nop
 8003f24:	40008000 	.word	0x40008000
 8003f28:	00f42400 	.word	0x00f42400

08003f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01a      	beq.n	8004042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800402a:	d10a      	bne.n	8004042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  }
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b098      	sub	sp, #96	@ 0x60
 8004074:	af02      	add	r7, sp, #8
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004080:	f7fc fe54 	bl	8000d2c <HAL_GetTick>
 8004084:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b08      	cmp	r3, #8
 8004092:	d12e      	bne.n	80040f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004094:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409c:	2200      	movs	r2, #0
 800409e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f88c 	bl	80041c0 <UART_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d021      	beq.n	80040f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e6      	bne.n	80040ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e062      	b.n	80041b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d149      	bne.n	8004194 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004100:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f856 	bl	80041c0 <UART_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d03c      	beq.n	8004194 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	623b      	str	r3, [r7, #32]
   return(result);
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800412e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004138:	633b      	str	r3, [r7, #48]	@ 0x30
 800413a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800413e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e6      	bne.n	800411a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3308      	adds	r3, #8
 8004152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	60fb      	str	r3, [r7, #12]
   return(result);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800416c:	61fa      	str	r2, [r7, #28]
 800416e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	69b9      	ldr	r1, [r7, #24]
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	617b      	str	r3, [r7, #20]
   return(result);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e011      	b.n	80041b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3758      	adds	r7, #88	@ 0x58
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d0:	e04f      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d04b      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fc fda7 	bl	8000d2c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e04e      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d037      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b80      	cmp	r3, #128	@ 0x80
 8004206:	d034      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b40      	cmp	r3, #64	@ 0x40
 800420c:	d031      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b08      	cmp	r3, #8
 800421a:	d110      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2208      	movs	r2, #8
 8004222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f838 	bl	800429a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2208      	movs	r2, #8
 800422e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e029      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800424c:	d111      	bne.n	8004272 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f81e 	bl	800429a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e00f      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	429a      	cmp	r2, r3
 800428e:	d0a0      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800429a:	b480      	push	{r7}
 800429c:	b095      	sub	sp, #84	@ 0x54
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800430c:	2b01      	cmp	r3, #1
 800430e:	d118      	bne.n	8004342 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	60bb      	str	r3, [r7, #8]
   return(result);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	647b      	str	r3, [r7, #68]	@ 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6979      	ldr	r1, [r7, #20]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e6      	bne.n	8004310 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004356:	bf00      	nop
 8004358:	3754      	adds	r7, #84	@ 0x54
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	4603      	mov	r3, r0
 800436a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004374:	2b84      	cmp	r3, #132	@ 0x84
 8004376:	d005      	beq.n	8004384 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004378:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	3303      	adds	r3, #3
 8004382:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004384:	68fb      	ldr	r3, [r7, #12]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004396:	f000 fae5 	bl	8004964 <vTaskStartScheduler>
  
  return osOK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	bd80      	pop	{r7, pc}

080043a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043a2:	b089      	sub	sp, #36	@ 0x24
 80043a4:	af04      	add	r7, sp, #16
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d020      	beq.n	80043f4 <osThreadCreate+0x54>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01c      	beq.n	80043f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685c      	ldr	r4, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691e      	ldr	r6, [r3, #16]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ffc8 	bl	8004362 <makeFreeRtosPriority>
 80043d2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043dc:	9202      	str	r2, [sp, #8]
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	9100      	str	r1, [sp, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	4632      	mov	r2, r6
 80043e6:	4629      	mov	r1, r5
 80043e8:	4620      	mov	r0, r4
 80043ea:	f000 f8ed 	bl	80045c8 <xTaskCreateStatic>
 80043ee:	4603      	mov	r3, r0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e01c      	b.n	800442e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685c      	ldr	r4, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004400:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ffaa 	bl	8004362 <makeFreeRtosPriority>
 800440e:	4602      	mov	r2, r0
 8004410:	f107 030c 	add.w	r3, r7, #12
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	9200      	str	r2, [sp, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	4632      	mov	r2, r6
 800441c:	4629      	mov	r1, r5
 800441e:	4620      	mov	r0, r4
 8004420:	f000 f932 	bl	8004688 <xTaskCreate>
 8004424:	4603      	mov	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004438 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <osDelay+0x16>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	e000      	b.n	8004450 <osDelay+0x18>
 800444e:	2301      	movs	r3, #1
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fa51 	bl	80048f8 <vTaskDelay>
  
  return osOK;
 8004456:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f103 0208 	add.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f04f 32ff 	mov.w	r2, #4294967295
 8004478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f103 0208 	add.w	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f103 0208 	add.w	r2, r3, #8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ba:	b480      	push	{r7}
 80044bc:	b085      	sub	sp, #20
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d103      	bne.n	8004522 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e00c      	b.n	800453c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3308      	adds	r3, #8
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e002      	b.n	8004530 <vListInsert+0x2e>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	d2f6      	bcs.n	800452a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	601a      	str	r2, [r3, #0]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6892      	ldr	r2, [r2, #8]
 800458a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6852      	ldr	r2, [r2, #4]
 8004594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d103      	bne.n	80045a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	1e5a      	subs	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08e      	sub	sp, #56	@ 0x38
 80045cc:	af04      	add	r7, sp, #16
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <xTaskCreateStatic+0x4a>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	61fb      	str	r3, [r7, #28]
}
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	e7fd      	b.n	800460e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004612:	2354      	movs	r3, #84	@ 0x54
 8004614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b54      	cmp	r3, #84	@ 0x54
 800461a:	d00b      	beq.n	8004634 <xTaskCreateStatic+0x6c>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	61bb      	str	r3, [r7, #24]
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	e7fd      	b.n	8004630 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004634:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01e      	beq.n	800467a <xTaskCreateStatic+0xb2>
 800463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01b      	beq.n	800467a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	2202      	movs	r2, #2
 8004650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004654:	2300      	movs	r3, #0
 8004656:	9303      	str	r3, [sp, #12]
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	9302      	str	r3, [sp, #8]
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f850 	bl	8004712 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004672:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004674:	f000 f8d6 	bl	8004824 <prvAddNewTaskToReadyList>
 8004678:	e001      	b.n	800467e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800467e:	697b      	ldr	r3, [r7, #20]
	}
 8004680:	4618      	mov	r0, r3
 8004682:	3728      	adds	r7, #40	@ 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08c      	sub	sp, #48	@ 0x30
 800468c:	af04      	add	r7, sp, #16
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fef3 	bl	8005488 <pvPortMalloc>
 80046a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046aa:	2054      	movs	r0, #84	@ 0x54
 80046ac:	f000 feec 	bl	8005488 <pvPortMalloc>
 80046b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80046be:	e005      	b.n	80046cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046c0:	6978      	ldr	r0, [r7, #20]
 80046c2:	f000 ffaf 	bl	8005624 <vPortFree>
 80046c6:	e001      	b.n	80046cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d017      	beq.n	8004702 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046da:	88fa      	ldrh	r2, [r7, #6]
 80046dc:	2300      	movs	r3, #0
 80046de:	9303      	str	r3, [sp, #12]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	9302      	str	r3, [sp, #8]
 80046e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f80e 	bl	8004712 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046f6:	69f8      	ldr	r0, [r7, #28]
 80046f8:	f000 f894 	bl	8004824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046fc:	2301      	movs	r3, #1
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	e002      	b.n	8004708 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004708:	69bb      	ldr	r3, [r7, #24]
	}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b088      	sub	sp, #32
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800472a:	3b01      	subs	r3, #1
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f023 0307 	bic.w	r3, r3, #7
 8004738:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00b      	beq.n	800475c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	617b      	str	r3, [r7, #20]
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01f      	beq.n	80047a2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	e012      	b.n	800478e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	7819      	ldrb	r1, [r3, #0]
 8004770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4413      	add	r3, r2
 8004776:	3334      	adds	r3, #52	@ 0x34
 8004778:	460a      	mov	r2, r1
 800477a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d006      	beq.n	8004796 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	3301      	adds	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b0f      	cmp	r3, #15
 8004792:	d9e9      	bls.n	8004768 <prvInitialiseNewTask+0x56>
 8004794:	e000      	b.n	8004798 <prvInitialiseNewTask+0x86>
			{
				break;
 8004796:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047a0:	e003      	b.n	80047aa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d901      	bls.n	80047b4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047b0:	2306      	movs	r3, #6
 80047b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047be:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	2200      	movs	r2, #0
 80047c4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c8:	3304      	adds	r3, #4
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fe68 	bl	80044a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	3318      	adds	r3, #24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fe63 	bl	80044a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	f1c3 0207 	rsb	r2, r3, #7
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f2:	2200      	movs	r2, #0
 80047f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	68f9      	ldr	r1, [r7, #12]
 8004802:	69b8      	ldr	r0, [r7, #24]
 8004804:	f000 fc2c 	bl	8005060 <pxPortInitialiseStack>
 8004808:	4602      	mov	r2, r0
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800480e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800481a:	bf00      	nop
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800482c:	f000 fd4c 	bl	80052c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004830:	4b2a      	ldr	r3, [pc, #168]	@ (80048dc <prvAddNewTaskToReadyList+0xb8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	4a29      	ldr	r2, [pc, #164]	@ (80048dc <prvAddNewTaskToReadyList+0xb8>)
 8004838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800483a:	4b29      	ldr	r3, [pc, #164]	@ (80048e0 <prvAddNewTaskToReadyList+0xbc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004842:	4a27      	ldr	r2, [pc, #156]	@ (80048e0 <prvAddNewTaskToReadyList+0xbc>)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004848:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <prvAddNewTaskToReadyList+0xb8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d110      	bne.n	8004872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004850:	f000 fac4 	bl	8004ddc <prvInitialiseTaskLists>
 8004854:	e00d      	b.n	8004872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004856:	4b23      	ldr	r3, [pc, #140]	@ (80048e4 <prvAddNewTaskToReadyList+0xc0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800485e:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <prvAddNewTaskToReadyList+0xbc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	429a      	cmp	r2, r3
 800486a:	d802      	bhi.n	8004872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800486c:	4a1c      	ldr	r2, [pc, #112]	@ (80048e0 <prvAddNewTaskToReadyList+0xbc>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004872:	4b1d      	ldr	r3, [pc, #116]	@ (80048e8 <prvAddNewTaskToReadyList+0xc4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <prvAddNewTaskToReadyList+0xc4>)
 800487a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	4b19      	ldr	r3, [pc, #100]	@ (80048ec <prvAddNewTaskToReadyList+0xc8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4313      	orrs	r3, r2
 800488a:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <prvAddNewTaskToReadyList+0xc8>)
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <prvAddNewTaskToReadyList+0xcc>)
 800489c:	441a      	add	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f7ff fe08 	bl	80044ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048aa:	f000 fd3f 	bl	800532c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048ae:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <prvAddNewTaskToReadyList+0xc0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048b6:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <prvAddNewTaskToReadyList+0xbc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d207      	bcs.n	80048d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <prvAddNewTaskToReadyList+0xd0>)
 80048c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000500 	.word	0x20000500
 80048e0:	20000400 	.word	0x20000400
 80048e4:	2000050c 	.word	0x2000050c
 80048e8:	2000051c 	.word	0x2000051c
 80048ec:	20000508 	.word	0x20000508
 80048f0:	20000404 	.word	0x20000404
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d018      	beq.n	800493c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800490a:	4b14      	ldr	r3, [pc, #80]	@ (800495c <vTaskDelay+0x64>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <vTaskDelay+0x32>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800492a:	f000 f87d 	bl	8004a28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800492e:	2100      	movs	r1, #0
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fb2f 	bl	8004f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004936:	f000 f885 	bl	8004a44 <xTaskResumeAll>
 800493a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d107      	bne.n	8004952 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004942:	4b07      	ldr	r3, [pc, #28]	@ (8004960 <vTaskDelay+0x68>)
 8004944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004952:	bf00      	nop
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000528 	.word	0x20000528
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	@ 0x28
 8004968:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004972:	463a      	mov	r2, r7
 8004974:	1d39      	adds	r1, r7, #4
 8004976:	f107 0308 	add.w	r3, r7, #8
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fda0 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	9202      	str	r2, [sp, #8]
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	2300      	movs	r3, #0
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	2300      	movs	r3, #0
 8004990:	460a      	mov	r2, r1
 8004992:	491f      	ldr	r1, [pc, #124]	@ (8004a10 <vTaskStartScheduler+0xac>)
 8004994:	481f      	ldr	r0, [pc, #124]	@ (8004a14 <vTaskStartScheduler+0xb0>)
 8004996:	f7ff fe17 	bl	80045c8 <xTaskCreateStatic>
 800499a:	4603      	mov	r3, r0
 800499c:	4a1e      	ldr	r2, [pc, #120]	@ (8004a18 <vTaskStartScheduler+0xb4>)
 800499e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <vTaskStartScheduler+0xb4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049a8:	2301      	movs	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	e001      	b.n	80049b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d116      	bne.n	80049e6 <vTaskStartScheduler+0x82>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	613b      	str	r3, [r7, #16]
}
 80049ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049cc:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <vTaskStartScheduler+0xb8>)
 80049ce:	f04f 32ff 	mov.w	r2, #4294967295
 80049d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049d4:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <vTaskStartScheduler+0xbc>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049da:	4b12      	ldr	r3, [pc, #72]	@ (8004a24 <vTaskStartScheduler+0xc0>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049e0:	f000 fbce 	bl	8005180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049e4:	e00f      	b.n	8004a06 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d10b      	bne.n	8004a06 <vTaskStartScheduler+0xa2>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	e7fd      	b.n	8004a02 <vTaskStartScheduler+0x9e>
}
 8004a06:	bf00      	nop
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	080058fc 	.word	0x080058fc
 8004a14:	08004dad 	.word	0x08004dad
 8004a18:	20000524 	.word	0x20000524
 8004a1c:	20000520 	.word	0x20000520
 8004a20:	2000050c 	.word	0x2000050c
 8004a24:	20000504 	.word	0x20000504

08004a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a2c:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <vTaskSuspendAll+0x18>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4a03      	ldr	r2, [pc, #12]	@ (8004a40 <vTaskSuspendAll+0x18>)
 8004a34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	20000528 	.word	0x20000528

08004a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a52:	4b42      	ldr	r3, [pc, #264]	@ (8004b5c <xTaskResumeAll+0x118>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <xTaskResumeAll+0x2e>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	603b      	str	r3, [r7, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	e7fd      	b.n	8004a6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a72:	f000 fc29 	bl	80052c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a76:	4b39      	ldr	r3, [pc, #228]	@ (8004b5c <xTaskResumeAll+0x118>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	4a37      	ldr	r2, [pc, #220]	@ (8004b5c <xTaskResumeAll+0x118>)
 8004a7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a80:	4b36      	ldr	r3, [pc, #216]	@ (8004b5c <xTaskResumeAll+0x118>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d161      	bne.n	8004b4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a88:	4b35      	ldr	r3, [pc, #212]	@ (8004b60 <xTaskResumeAll+0x11c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d05d      	beq.n	8004b4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a90:	e02e      	b.n	8004af0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a92:	4b34      	ldr	r3, [pc, #208]	@ (8004b64 <xTaskResumeAll+0x120>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3318      	adds	r3, #24
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fd68 	bl	8004574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fd63 	bl	8004574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b68 <xTaskResumeAll+0x124>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	4a2a      	ldr	r2, [pc, #168]	@ (8004b68 <xTaskResumeAll+0x124>)
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4a27      	ldr	r2, [pc, #156]	@ (8004b6c <xTaskResumeAll+0x128>)
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7ff fcef 	bl	80044ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae0:	4b23      	ldr	r3, [pc, #140]	@ (8004b70 <xTaskResumeAll+0x12c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004aea:	4b22      	ldr	r3, [pc, #136]	@ (8004b74 <xTaskResumeAll+0x130>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b64 <xTaskResumeAll+0x120>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1cc      	bne.n	8004a92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004afe:	f000 fa0b 	bl	8004f18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b02:	4b1d      	ldr	r3, [pc, #116]	@ (8004b78 <xTaskResumeAll+0x134>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d010      	beq.n	8004b30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b0e:	f000 f837 	bl	8004b80 <xTaskIncrementTick>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b18:	4b16      	ldr	r3, [pc, #88]	@ (8004b74 <xTaskResumeAll+0x130>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f1      	bne.n	8004b0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004b2a:	4b13      	ldr	r3, [pc, #76]	@ (8004b78 <xTaskResumeAll+0x134>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b30:	4b10      	ldr	r3, [pc, #64]	@ (8004b74 <xTaskResumeAll+0x130>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d009      	beq.n	8004b4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b7c <xTaskResumeAll+0x138>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b4c:	f000 fbee 	bl	800532c <vPortExitCritical>

	return xAlreadyYielded;
 8004b50:	68bb      	ldr	r3, [r7, #8]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000528 	.word	0x20000528
 8004b60:	20000500 	.word	0x20000500
 8004b64:	200004c0 	.word	0x200004c0
 8004b68:	20000508 	.word	0x20000508
 8004b6c:	20000404 	.word	0x20000404
 8004b70:	20000400 	.word	0x20000400
 8004b74:	20000514 	.word	0x20000514
 8004b78:	20000510 	.word	0x20000510
 8004b7c:	e000ed04 	.word	0xe000ed04

08004b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8004cc8 <xTaskIncrementTick+0x148>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f040 808f 	bne.w	8004cb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b94:	4b4d      	ldr	r3, [pc, #308]	@ (8004ccc <xTaskIncrementTick+0x14c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004ccc <xTaskIncrementTick+0x14c>)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d121      	bne.n	8004bec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ba8:	4b49      	ldr	r3, [pc, #292]	@ (8004cd0 <xTaskIncrementTick+0x150>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <xTaskIncrementTick+0x4a>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	603b      	str	r3, [r7, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <xTaskIncrementTick+0x46>
 8004bca:	4b41      	ldr	r3, [pc, #260]	@ (8004cd0 <xTaskIncrementTick+0x150>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	4b40      	ldr	r3, [pc, #256]	@ (8004cd4 <xTaskIncrementTick+0x154>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a3e      	ldr	r2, [pc, #248]	@ (8004cd0 <xTaskIncrementTick+0x150>)
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4a3e      	ldr	r2, [pc, #248]	@ (8004cd4 <xTaskIncrementTick+0x154>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd8 <xTaskIncrementTick+0x158>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a3c      	ldr	r2, [pc, #240]	@ (8004cd8 <xTaskIncrementTick+0x158>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	f000 f996 	bl	8004f18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bec:	4b3b      	ldr	r3, [pc, #236]	@ (8004cdc <xTaskIncrementTick+0x15c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d348      	bcc.n	8004c88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf6:	4b36      	ldr	r3, [pc, #216]	@ (8004cd0 <xTaskIncrementTick+0x150>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c00:	4b36      	ldr	r3, [pc, #216]	@ (8004cdc <xTaskIncrementTick+0x15c>)
 8004c02:	f04f 32ff 	mov.w	r2, #4294967295
 8004c06:	601a      	str	r2, [r3, #0]
					break;
 8004c08:	e03e      	b.n	8004c88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0a:	4b31      	ldr	r3, [pc, #196]	@ (8004cd0 <xTaskIncrementTick+0x150>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d203      	bcs.n	8004c2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c22:	4a2e      	ldr	r2, [pc, #184]	@ (8004cdc <xTaskIncrementTick+0x15c>)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c28:	e02e      	b.n	8004c88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fca0 	bl	8004574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	3318      	adds	r3, #24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fc97 	bl	8004574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <xTaskIncrementTick+0x160>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	4a22      	ldr	r2, [pc, #136]	@ (8004ce0 <xTaskIncrementTick+0x160>)
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <xTaskIncrementTick+0x164>)
 8004c66:	441a      	add	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f7ff fc23 	bl	80044ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce8 <xTaskIncrementTick+0x168>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d3b9      	bcc.n	8004bf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c86:	e7b6      	b.n	8004bf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c88:	4b17      	ldr	r3, [pc, #92]	@ (8004ce8 <xTaskIncrementTick+0x168>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c8e:	4915      	ldr	r1, [pc, #84]	@ (8004ce4 <xTaskIncrementTick+0x164>)
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d901      	bls.n	8004ca4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ca4:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <xTaskIncrementTick+0x16c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e004      	b.n	8004cbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf0 <xTaskIncrementTick+0x170>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf0 <xTaskIncrementTick+0x170>)
 8004cba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cbc:	697b      	ldr	r3, [r7, #20]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000528 	.word	0x20000528
 8004ccc:	20000504 	.word	0x20000504
 8004cd0:	200004b8 	.word	0x200004b8
 8004cd4:	200004bc 	.word	0x200004bc
 8004cd8:	20000518 	.word	0x20000518
 8004cdc:	20000520 	.word	0x20000520
 8004ce0:	20000508 	.word	0x20000508
 8004ce4:	20000404 	.word	0x20000404
 8004ce8:	20000400 	.word	0x20000400
 8004cec:	20000514 	.word	0x20000514
 8004cf0:	20000510 	.word	0x20000510

08004cf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cfa:	4b27      	ldr	r3, [pc, #156]	@ (8004d98 <vTaskSwitchContext+0xa4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d02:	4b26      	ldr	r3, [pc, #152]	@ (8004d9c <vTaskSwitchContext+0xa8>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d08:	e040      	b.n	8004d8c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004d0a:	4b24      	ldr	r3, [pc, #144]	@ (8004d9c <vTaskSwitchContext+0xa8>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d10:	4b23      	ldr	r3, [pc, #140]	@ (8004da0 <vTaskSwitchContext+0xac>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	fab3 f383 	clz	r3, r3
 8004d1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d1e:	7afb      	ldrb	r3, [r7, #11]
 8004d20:	f1c3 031f 	rsb	r3, r3, #31
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	491f      	ldr	r1, [pc, #124]	@ (8004da4 <vTaskSwitchContext+0xb0>)
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	607b      	str	r3, [r7, #4]
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	e7fd      	b.n	8004d4e <vTaskSwitchContext+0x5a>
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4a11      	ldr	r2, [pc, #68]	@ (8004da4 <vTaskSwitchContext+0xb0>)
 8004d5e:	4413      	add	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3308      	adds	r3, #8
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d104      	bne.n	8004d82 <vTaskSwitchContext+0x8e>
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a07      	ldr	r2, [pc, #28]	@ (8004da8 <vTaskSwitchContext+0xb4>)
 8004d8a:	6013      	str	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	20000528 	.word	0x20000528
 8004d9c:	20000514 	.word	0x20000514
 8004da0:	20000508 	.word	0x20000508
 8004da4:	20000404 	.word	0x20000404
 8004da8:	20000400 	.word	0x20000400

08004dac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004db4:	f000 f852 	bl	8004e5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004db8:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <prvIdleTask+0x28>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d9f9      	bls.n	8004db4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <prvIdleTask+0x2c>)
 8004dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dd0:	e7f0      	b.n	8004db4 <prvIdleTask+0x8>
 8004dd2:	bf00      	nop
 8004dd4:	20000404 	.word	0x20000404
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	e00c      	b.n	8004e02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4a12      	ldr	r2, [pc, #72]	@ (8004e3c <prvInitialiseTaskLists+0x60>)
 8004df4:	4413      	add	r3, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fb32 	bl	8004460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b06      	cmp	r3, #6
 8004e06:	d9ef      	bls.n	8004de8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e08:	480d      	ldr	r0, [pc, #52]	@ (8004e40 <prvInitialiseTaskLists+0x64>)
 8004e0a:	f7ff fb29 	bl	8004460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e0e:	480d      	ldr	r0, [pc, #52]	@ (8004e44 <prvInitialiseTaskLists+0x68>)
 8004e10:	f7ff fb26 	bl	8004460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e14:	480c      	ldr	r0, [pc, #48]	@ (8004e48 <prvInitialiseTaskLists+0x6c>)
 8004e16:	f7ff fb23 	bl	8004460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e1a:	480c      	ldr	r0, [pc, #48]	@ (8004e4c <prvInitialiseTaskLists+0x70>)
 8004e1c:	f7ff fb20 	bl	8004460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e20:	480b      	ldr	r0, [pc, #44]	@ (8004e50 <prvInitialiseTaskLists+0x74>)
 8004e22:	f7ff fb1d 	bl	8004460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e26:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <prvInitialiseTaskLists+0x78>)
 8004e28:	4a05      	ldr	r2, [pc, #20]	@ (8004e40 <prvInitialiseTaskLists+0x64>)
 8004e2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <prvInitialiseTaskLists+0x7c>)
 8004e2e:	4a05      	ldr	r2, [pc, #20]	@ (8004e44 <prvInitialiseTaskLists+0x68>)
 8004e30:	601a      	str	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000404 	.word	0x20000404
 8004e40:	20000490 	.word	0x20000490
 8004e44:	200004a4 	.word	0x200004a4
 8004e48:	200004c0 	.word	0x200004c0
 8004e4c:	200004d4 	.word	0x200004d4
 8004e50:	200004ec 	.word	0x200004ec
 8004e54:	200004b8 	.word	0x200004b8
 8004e58:	200004bc 	.word	0x200004bc

08004e5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e62:	e019      	b.n	8004e98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e64:	f000 fa30 	bl	80052c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e68:	4b10      	ldr	r3, [pc, #64]	@ (8004eac <prvCheckTasksWaitingTermination+0x50>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fb7d 	bl	8004574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <prvCheckTasksWaitingTermination+0x54>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	4a0b      	ldr	r2, [pc, #44]	@ (8004eb0 <prvCheckTasksWaitingTermination+0x54>)
 8004e82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e84:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <prvCheckTasksWaitingTermination+0x58>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb4 <prvCheckTasksWaitingTermination+0x58>)
 8004e8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e8e:	f000 fa4d 	bl	800532c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f810 	bl	8004eb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <prvCheckTasksWaitingTermination+0x58>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e1      	bne.n	8004e64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200004d4 	.word	0x200004d4
 8004eb0:	20000500 	.word	0x20000500
 8004eb4:	200004e8 	.word	0x200004e8

08004eb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d108      	bne.n	8004edc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fba8 	bl	8005624 <vPortFree>
				vPortFree( pxTCB );
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fba5 	bl	8005624 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eda:	e019      	b.n	8004f10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d103      	bne.n	8004eee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fb9c 	bl	8005624 <vPortFree>
	}
 8004eec:	e010      	b.n	8004f10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d00b      	beq.n	8004f10 <prvDeleteTCB+0x58>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	60fb      	str	r3, [r7, #12]
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	e7fd      	b.n	8004f0c <prvDeleteTCB+0x54>
	}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <prvResetNextTaskUnblockTime+0x38>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f28:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <prvResetNextTaskUnblockTime+0x3c>)
 8004f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f30:	e008      	b.n	8004f44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f32:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <prvResetNextTaskUnblockTime+0x38>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4a04      	ldr	r2, [pc, #16]	@ (8004f54 <prvResetNextTaskUnblockTime+0x3c>)
 8004f42:	6013      	str	r3, [r2, #0]
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	200004b8 	.word	0x200004b8
 8004f54:	20000520 	.word	0x20000520

08004f58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <xTaskGetSchedulerState+0x34>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f66:	2301      	movs	r3, #1
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	e008      	b.n	8004f7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f6c:	4b08      	ldr	r3, [pc, #32]	@ (8004f90 <xTaskGetSchedulerState+0x38>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f74:	2302      	movs	r3, #2
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	e001      	b.n	8004f7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f7e:	687b      	ldr	r3, [r7, #4]
	}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	2000050c 	.word	0x2000050c
 8004f90:	20000528 	.word	0x20000528

08004f94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f9e:	4b29      	ldr	r3, [pc, #164]	@ (8005044 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fa4:	4b28      	ldr	r3, [pc, #160]	@ (8005048 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fae2 	bl	8004574 <uxListRemove>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004fb6:	4b24      	ldr	r3, [pc, #144]	@ (8005048 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43da      	mvns	r2, r3
 8004fc4:	4b21      	ldr	r3, [pc, #132]	@ (800504c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	4a20      	ldr	r2, [pc, #128]	@ (800504c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d10a      	bne.n	8004fec <prvAddCurrentTaskToDelayedList+0x58>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	481a      	ldr	r0, [pc, #104]	@ (8005050 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fe6:	f7ff fa68 	bl	80044ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fea:	e026      	b.n	800503a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ff4:	4b14      	ldr	r3, [pc, #80]	@ (8005048 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	429a      	cmp	r2, r3
 8005002:	d209      	bcs.n	8005018 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005004:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b0f      	ldr	r3, [pc, #60]	@ (8005048 <prvAddCurrentTaskToDelayedList+0xb4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3304      	adds	r3, #4
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f7ff fa76 	bl	8004502 <vListInsert>
}
 8005016:	e010      	b.n	800503a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005018:	4b0f      	ldr	r3, [pc, #60]	@ (8005058 <prvAddCurrentTaskToDelayedList+0xc4>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <prvAddCurrentTaskToDelayedList+0xb4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3304      	adds	r3, #4
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f7ff fa6c 	bl	8004502 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800502a:	4b0c      	ldr	r3, [pc, #48]	@ (800505c <prvAddCurrentTaskToDelayedList+0xc8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	429a      	cmp	r2, r3
 8005032:	d202      	bcs.n	800503a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005034:	4a09      	ldr	r2, [pc, #36]	@ (800505c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6013      	str	r3, [r2, #0]
}
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000504 	.word	0x20000504
 8005048:	20000400 	.word	0x20000400
 800504c:	20000508 	.word	0x20000508
 8005050:	200004ec 	.word	0x200004ec
 8005054:	200004bc 	.word	0x200004bc
 8005058:	200004b8 	.word	0x200004b8
 800505c:	20000520 	.word	0x20000520

08005060 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3b04      	subs	r3, #4
 8005070:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3b04      	subs	r3, #4
 800507e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b04      	subs	r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005090:	4a0c      	ldr	r2, [pc, #48]	@ (80050c4 <pxPortInitialiseStack+0x64>)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3b14      	subs	r3, #20
 800509a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3b04      	subs	r3, #4
 80050a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f06f 0202 	mvn.w	r2, #2
 80050ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3b20      	subs	r3, #32
 80050b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050b6:	68fb      	ldr	r3, [r7, #12]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	080050c9 	.word	0x080050c9

080050c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050d2:	4b13      	ldr	r3, [pc, #76]	@ (8005120 <prvTaskExitError+0x58>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d00b      	beq.n	80050f4 <prvTaskExitError+0x2c>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60fb      	str	r3, [r7, #12]
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <prvTaskExitError+0x28>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	60bb      	str	r3, [r7, #8]
}
 8005106:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005108:	bf00      	nop
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0fc      	beq.n	800510a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	2000000c 	.word	0x2000000c
	...

08005130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005130:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <pxCurrentTCBConst2>)
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	f380 8809 	msr	PSP, r0
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	4770      	bx	lr
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst2>:
 8005150:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005158:	4808      	ldr	r0, [pc, #32]	@ (800517c <prvPortStartFirstTask+0x24>)
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	6800      	ldr	r0, [r0, #0]
 800515e:	f380 8808 	msr	MSP, r0
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8814 	msr	CONTROL, r0
 800516a:	b662      	cpsie	i
 800516c:	b661      	cpsie	f
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	df00      	svc	0
 8005178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800517a:	bf00      	nop
 800517c:	e000ed08 	.word	0xe000ed08

08005180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005186:	4b47      	ldr	r3, [pc, #284]	@ (80052a4 <xPortStartScheduler+0x124>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a47      	ldr	r2, [pc, #284]	@ (80052a8 <xPortStartScheduler+0x128>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10b      	bne.n	80051a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	613b      	str	r3, [r7, #16]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051a8:	4b3e      	ldr	r3, [pc, #248]	@ (80052a4 <xPortStartScheduler+0x124>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a3f      	ldr	r2, [pc, #252]	@ (80052ac <xPortStartScheduler+0x12c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10b      	bne.n	80051ca <xPortStartScheduler+0x4a>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60fb      	str	r3, [r7, #12]
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	e7fd      	b.n	80051c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051ca:	4b39      	ldr	r3, [pc, #228]	@ (80052b0 <xPortStartScheduler+0x130>)
 80051cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	22ff      	movs	r2, #255	@ 0xff
 80051da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <xPortStartScheduler+0x134>)
 80051f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <xPortStartScheduler+0x138>)
 80051f4:	2207      	movs	r2, #7
 80051f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051f8:	e009      	b.n	800520e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80051fa:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <xPortStartScheduler+0x138>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3b01      	subs	r3, #1
 8005200:	4a2d      	ldr	r2, [pc, #180]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b80      	cmp	r3, #128	@ 0x80
 8005218:	d0ef      	beq.n	80051fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800521a:	4b27      	ldr	r3, [pc, #156]	@ (80052b8 <xPortStartScheduler+0x138>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1c3 0307 	rsb	r3, r3, #7
 8005222:	2b04      	cmp	r3, #4
 8005224:	d00b      	beq.n	800523e <xPortStartScheduler+0xbe>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60bb      	str	r3, [r7, #8]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800523e:	4b1e      	ldr	r3, [pc, #120]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <xPortStartScheduler+0x138>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005250:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <xPortStartScheduler+0x13c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a16      	ldr	r2, [pc, #88]	@ (80052bc <xPortStartScheduler+0x13c>)
 8005262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005268:	4b14      	ldr	r3, [pc, #80]	@ (80052bc <xPortStartScheduler+0x13c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <xPortStartScheduler+0x13c>)
 800526e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005274:	f000 f8da 	bl	800542c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005278:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <xPortStartScheduler+0x140>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800527e:	f000 f8f9 	bl	8005474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005282:	4b10      	ldr	r3, [pc, #64]	@ (80052c4 <xPortStartScheduler+0x144>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a0f      	ldr	r2, [pc, #60]	@ (80052c4 <xPortStartScheduler+0x144>)
 8005288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800528c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800528e:	f7ff ff63 	bl	8005158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005292:	f7ff fd2f 	bl	8004cf4 <vTaskSwitchContext>
	prvTaskExitError();
 8005296:	f7ff ff17 	bl	80050c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	e000ed00 	.word	0xe000ed00
 80052a8:	410fc271 	.word	0x410fc271
 80052ac:	410fc270 	.word	0x410fc270
 80052b0:	e000e400 	.word	0xe000e400
 80052b4:	2000052c 	.word	0x2000052c
 80052b8:	20000530 	.word	0x20000530
 80052bc:	e000ed20 	.word	0xe000ed20
 80052c0:	2000000c 	.word	0x2000000c
 80052c4:	e000ef34 	.word	0xe000ef34

080052c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	607b      	str	r3, [r7, #4]
}
 80052e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052e2:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d110      	bne.n	8005316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <vPortEnterCritical+0x60>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <vPortEnterCritical+0x4e>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	603b      	str	r3, [r7, #0]
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <vPortEnterCritical+0x4a>
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	2000000c 	.word	0x2000000c
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005332:	4b12      	ldr	r3, [pc, #72]	@ (800537c <vPortExitCritical+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <vPortExitCritical+0x26>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	607b      	str	r3, [r7, #4]
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	e7fd      	b.n	800534e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <vPortExitCritical+0x50>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3b01      	subs	r3, #1
 8005358:	4a08      	ldr	r2, [pc, #32]	@ (800537c <vPortExitCritical+0x50>)
 800535a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800535c:	4b07      	ldr	r3, [pc, #28]	@ (800537c <vPortExitCritical+0x50>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <vPortExitCritical+0x44>
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800536e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	2000000c 	.word	0x2000000c

08005380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005380:	f3ef 8009 	mrs	r0, PSP
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <pxCurrentTCBConst>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f01e 0f10 	tst.w	lr, #16
 8005390:	bf08      	it	eq
 8005392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539a:	6010      	str	r0, [r2, #0]
 800539c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053a4:	f380 8811 	msr	BASEPRI, r0
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f7ff fca0 	bl	8004cf4 <vTaskSwitchContext>
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f380 8811 	msr	BASEPRI, r0
 80053bc:	bc09      	pop	{r0, r3}
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	6808      	ldr	r0, [r1, #0]
 80053c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c6:	f01e 0f10 	tst.w	lr, #16
 80053ca:	bf08      	it	eq
 80053cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053d0:	f380 8809 	msr	PSP, r0
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst>:
 80053e0:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	607b      	str	r3, [r7, #4]
}
 8005400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005402:	f7ff fbbd 	bl	8004b80 <xTaskIncrementTick>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800540c:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <xPortSysTickHandler+0x40>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005436:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <vPortSetupTimerInterrupt+0x38>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800543c:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <vPortSetupTimerInterrupt+0x3c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0a      	ldr	r2, [pc, #40]	@ (800546c <vPortSetupTimerInterrupt+0x40>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	099b      	lsrs	r3, r3, #6
 8005448:	4a09      	ldr	r2, [pc, #36]	@ (8005470 <vPortSetupTimerInterrupt+0x44>)
 800544a:	3b01      	subs	r3, #1
 800544c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800544e:	4b04      	ldr	r3, [pc, #16]	@ (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005450:	2207      	movs	r2, #7
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e010 	.word	0xe000e010
 8005464:	e000e018 	.word	0xe000e018
 8005468:	20000000 	.word	0x20000000
 800546c:	10624dd3 	.word	0x10624dd3
 8005470:	e000e014 	.word	0xe000e014

08005474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005484 <vPortEnableVFP+0x10>
 8005478:	6801      	ldr	r1, [r0, #0]
 800547a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800547e:	6001      	str	r1, [r0, #0]
 8005480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005482:	bf00      	nop
 8005484:	e000ed88 	.word	0xe000ed88

08005488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	@ 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005494:	f7ff fac8 	bl	8004a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005498:	4b5c      	ldr	r3, [pc, #368]	@ (800560c <pvPortMalloc+0x184>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054a0:	f000 f924 	bl	80056ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005610 <pvPortMalloc+0x188>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 8095 	bne.w	80055dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01e      	beq.n	80054f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80054b8:	2208      	movs	r2, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d015      	beq.n	80054f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f023 0307 	bic.w	r3, r3, #7
 80054d0:	3308      	adds	r3, #8
 80054d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <pvPortMalloc+0x6e>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	617b      	str	r3, [r7, #20]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d06f      	beq.n	80055dc <pvPortMalloc+0x154>
 80054fc:	4b45      	ldr	r3, [pc, #276]	@ (8005614 <pvPortMalloc+0x18c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d86a      	bhi.n	80055dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005506:	4b44      	ldr	r3, [pc, #272]	@ (8005618 <pvPortMalloc+0x190>)
 8005508:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800550a:	4b43      	ldr	r3, [pc, #268]	@ (8005618 <pvPortMalloc+0x190>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005510:	e004      	b.n	800551c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d903      	bls.n	800552e <pvPortMalloc+0xa6>
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f1      	bne.n	8005512 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800552e:	4b37      	ldr	r3, [pc, #220]	@ (800560c <pvPortMalloc+0x184>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005534:	429a      	cmp	r2, r3
 8005536:	d051      	beq.n	80055dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	4413      	add	r3, r2
 8005540:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	2308      	movs	r3, #8
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	429a      	cmp	r2, r3
 8005558:	d920      	bls.n	800559c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800555a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <pvPortMalloc+0xfc>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	613b      	str	r3, [r7, #16]
}
 800557e:	bf00      	nop
 8005580:	bf00      	nop
 8005582:	e7fd      	b.n	8005580 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	1ad2      	subs	r2, r2, r3
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005596:	69b8      	ldr	r0, [r7, #24]
 8005598:	f000 f90a 	bl	80057b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800559c:	4b1d      	ldr	r3, [pc, #116]	@ (8005614 <pvPortMalloc+0x18c>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005614 <pvPortMalloc+0x18c>)
 80055a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005614 <pvPortMalloc+0x18c>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b1b      	ldr	r3, [pc, #108]	@ (800561c <pvPortMalloc+0x194>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d203      	bcs.n	80055be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055b6:	4b17      	ldr	r3, [pc, #92]	@ (8005614 <pvPortMalloc+0x18c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <pvPortMalloc+0x194>)
 80055bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4b13      	ldr	r3, [pc, #76]	@ (8005610 <pvPortMalloc+0x188>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055d2:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <pvPortMalloc+0x198>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	4a11      	ldr	r2, [pc, #68]	@ (8005620 <pvPortMalloc+0x198>)
 80055da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055dc:	f7ff fa32 	bl	8004a44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <pvPortMalloc+0x17a>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60fb      	str	r3, [r7, #12]
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	e7fd      	b.n	80055fe <pvPortMalloc+0x176>
	return pvReturn;
 8005602:	69fb      	ldr	r3, [r7, #28]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3728      	adds	r7, #40	@ 0x28
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	200010f4 	.word	0x200010f4
 8005610:	20001108 	.word	0x20001108
 8005614:	200010f8 	.word	0x200010f8
 8005618:	200010ec 	.word	0x200010ec
 800561c:	200010fc 	.word	0x200010fc
 8005620:	20001100 	.word	0x20001100

08005624 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d04f      	beq.n	80056d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005636:	2308      	movs	r3, #8
 8005638:	425b      	negs	r3, r3
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	4b25      	ldr	r3, [pc, #148]	@ (80056e0 <vPortFree+0xbc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4013      	ands	r3, r2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <vPortFree+0x46>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60fb      	str	r3, [r7, #12]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <vPortFree+0x66>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	60bb      	str	r3, [r7, #8]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	4b14      	ldr	r3, [pc, #80]	@ (80056e0 <vPortFree+0xbc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4013      	ands	r3, r2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01e      	beq.n	80056d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d11a      	bne.n	80056d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	4b0e      	ldr	r3, [pc, #56]	@ (80056e0 <vPortFree+0xbc>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	43db      	mvns	r3, r3
 80056aa:	401a      	ands	r2, r3
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056b0:	f7ff f9ba 	bl	8004a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <vPortFree+0xc0>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4413      	add	r3, r2
 80056be:	4a09      	ldr	r2, [pc, #36]	@ (80056e4 <vPortFree+0xc0>)
 80056c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056c2:	6938      	ldr	r0, [r7, #16]
 80056c4:	f000 f874 	bl	80057b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056c8:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <vPortFree+0xc4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a06      	ldr	r2, [pc, #24]	@ (80056e8 <vPortFree+0xc4>)
 80056d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056d2:	f7ff f9b7 	bl	8004a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056d6:	bf00      	nop
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20001108 	.word	0x20001108
 80056e4:	200010f8 	.word	0x200010f8
 80056e8:	20001104 	.word	0x20001104

080056ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056f2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80056f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056f8:	4b27      	ldr	r3, [pc, #156]	@ (8005798 <prvHeapInit+0xac>)
 80056fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00c      	beq.n	8005720 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3307      	adds	r3, #7
 800570a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0307 	bic.w	r3, r3, #7
 8005712:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	4a1f      	ldr	r2, [pc, #124]	@ (8005798 <prvHeapInit+0xac>)
 800571c:	4413      	add	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005724:	4a1d      	ldr	r2, [pc, #116]	@ (800579c <prvHeapInit+0xb0>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800572a:	4b1c      	ldr	r3, [pc, #112]	@ (800579c <prvHeapInit+0xb0>)
 800572c:	2200      	movs	r2, #0
 800572e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	4413      	add	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005738:	2208      	movs	r2, #8
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0307 	bic.w	r3, r3, #7
 8005746:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4a15      	ldr	r2, [pc, #84]	@ (80057a0 <prvHeapInit+0xb4>)
 800574c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800574e:	4b14      	ldr	r3, [pc, #80]	@ (80057a0 <prvHeapInit+0xb4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005756:	4b12      	ldr	r3, [pc, #72]	@ (80057a0 <prvHeapInit+0xb4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800576c:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <prvHeapInit+0xb4>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a0a      	ldr	r2, [pc, #40]	@ (80057a4 <prvHeapInit+0xb8>)
 800577a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a09      	ldr	r2, [pc, #36]	@ (80057a8 <prvHeapInit+0xbc>)
 8005782:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005784:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <prvHeapInit+0xc0>)
 8005786:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800578a:	601a      	str	r2, [r3, #0]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	20000534 	.word	0x20000534
 800579c:	200010ec 	.word	0x200010ec
 80057a0:	200010f4 	.word	0x200010f4
 80057a4:	200010fc 	.word	0x200010fc
 80057a8:	200010f8 	.word	0x200010f8
 80057ac:	20001108 	.word	0x20001108

080057b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057b8:	4b28      	ldr	r3, [pc, #160]	@ (800585c <prvInsertBlockIntoFreeList+0xac>)
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e002      	b.n	80057c4 <prvInsertBlockIntoFreeList+0x14>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d8f7      	bhi.n	80057be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	4413      	add	r3, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d108      	bne.n	80057f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	441a      	add	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	441a      	add	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d118      	bne.n	8005838 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <prvInsertBlockIntoFreeList+0xb0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d00d      	beq.n	800582e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	441a      	add	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	e008      	b.n	8005840 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800582e:	4b0c      	ldr	r3, [pc, #48]	@ (8005860 <prvInsertBlockIntoFreeList+0xb0>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e003      	b.n	8005840 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d002      	beq.n	800584e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800584e:	bf00      	nop
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	200010ec 	.word	0x200010ec
 8005860:	200010f4 	.word	0x200010f4

08005864 <memset>:
 8005864:	4402      	add	r2, r0
 8005866:	4603      	mov	r3, r0
 8005868:	4293      	cmp	r3, r2
 800586a:	d100      	bne.n	800586e <memset+0xa>
 800586c:	4770      	bx	lr
 800586e:	f803 1b01 	strb.w	r1, [r3], #1
 8005872:	e7f9      	b.n	8005868 <memset+0x4>

08005874 <__libc_init_array>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4d0d      	ldr	r5, [pc, #52]	@ (80058ac <__libc_init_array+0x38>)
 8005878:	4c0d      	ldr	r4, [pc, #52]	@ (80058b0 <__libc_init_array+0x3c>)
 800587a:	1b64      	subs	r4, r4, r5
 800587c:	10a4      	asrs	r4, r4, #2
 800587e:	2600      	movs	r6, #0
 8005880:	42a6      	cmp	r6, r4
 8005882:	d109      	bne.n	8005898 <__libc_init_array+0x24>
 8005884:	4d0b      	ldr	r5, [pc, #44]	@ (80058b4 <__libc_init_array+0x40>)
 8005886:	4c0c      	ldr	r4, [pc, #48]	@ (80058b8 <__libc_init_array+0x44>)
 8005888:	f000 f818 	bl	80058bc <_init>
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	2600      	movs	r6, #0
 8005892:	42a6      	cmp	r6, r4
 8005894:	d105      	bne.n	80058a2 <__libc_init_array+0x2e>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	f855 3b04 	ldr.w	r3, [r5], #4
 800589c:	4798      	blx	r3
 800589e:	3601      	adds	r6, #1
 80058a0:	e7ee      	b.n	8005880 <__libc_init_array+0xc>
 80058a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a6:	4798      	blx	r3
 80058a8:	3601      	adds	r6, #1
 80058aa:	e7f2      	b.n	8005892 <__libc_init_array+0x1e>
 80058ac:	08005954 	.word	0x08005954
 80058b0:	08005954 	.word	0x08005954
 80058b4:	08005954 	.word	0x08005954
 80058b8:	08005958 	.word	0x08005958

080058bc <_init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

080058c8 <_fini>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr
